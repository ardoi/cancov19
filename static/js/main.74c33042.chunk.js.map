{"version":3,"sources":["components/cxContext.js","util.js","data/country-by-population.js","components/chartTemplate.js","components/provinceChart.js","components/timeChart.js","components/lineChart.js","components/statNumber.js","components/dailyTimeChart.js","components/normalizedChart.js","components/textDisplay.js","components/worldDashboard.js","components/dashboard.js","App.js","serviceWorker.js","index.js"],"names":["CXContext","React","createContext","DataContext","state","detailData","detailDataW","deathData","this","hasCF","loading","dims","setState","processJHData","url","key","csv","cache","then","data","dd","d3a","columns","slice","ddate","d","date","country","region","value","parseFloat","lat","Lat","lon","Long","q","Array","from","v","totals","map","x","total","parseInt","length","sort","a","b","keep","keepAmount","forEach","push","out","includes","i","Prov","Date","moment","Total","cfw","crossfilter","clonedData","JSON","parse","stringify","cfwn","dimension","prov","dateN","provN","p3","p4","Promise","all","console","log","worldDetailData","worldDeathData","Provider","dimensions","ref","parent","props","children","Component","colorf","rgb","darker","formatHex","sortpc","provinces","colors","merged","a1","a2","y","population","ON","QC","BC","AB","SK","NL","NS","MB","NB","PE","YT","NT","NU","getWindowDimensions","window","width","innerWidth","height","innerHeight","totalReduce","group","reduce","p","provinceTotalReduce","accumulateGroup","source_group","sa","cumulate","res","el","Object","entries","k","populationW","renames","name","hasOwnProperty","ResetButton","style","css","cursor","Label","onClick","chart","filterAll","dc","ChartTemplate","button","label","context","useContext","useState","updateChart","chartData","updateChartData","params","usedata","div","useRef","windowSize","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useWindowDimensions","newChart","chartFunction","current","render","header","chartGroup","loc","normalize","reset","Popup","content","trigger","circular","color","title","Header","as","provinceChartFunc","divRef","chartW","chartH","top","provinceChart","popData","margins","right","bottom","left","cap","elasticX","othersGrouper","valueAccessor","ordinalColors","keys","reverse","xAxis","ticks","ProvinceChart","timeChartFunc","pgroup","stack","stacked","pCounts","tCount","smallestProvince","sel","dcchartGroup","timeChart","renderArea","elasticY","brushOn","clipPadding","xyTipsOn","scaleTime","domain","add","tickFormat","format","yAxis","pk","TimeChart","chartFunc","cumulative","ag","charts","ix","shareTitle","compose","LineChart","statNumberFunc","getValue","groupAll","reduceSum","quarterChart","ordering","StatNumber","dailyTimeChartFunc","pdim","provincesG","DailyTimeChart","NormalizedChart","LastDateDisplay","vals","last","max","WorldDashboard","panes_cumulative","menuItem","pane","Tab","Pane","attached","panes_daily","cases","Grid","Row","Column","GridRow","centered","Statistic","size","StatisticValue","StatisticLabel","Segment","menu","secondary","pointing","panes","renderActiveOnly","panes_cumulative_d","panes_daily_d","deaths","normalized","normalizedd","className","borderless","tabular","Dashboard","icon","inverted","id","textAlign","Icon","href","target","App","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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AgC,KACzCsF,EAASK,IAAML,EAASK,IAAM,GAAK3F,EAEvCuF,EAAI1E,KAAK,CAAEpC,IAAK+G,EAAG/G,IAAKc,MAAM,eAAM+F,MAR5B,8BAUZ,OAAOC,KAkBNK,EAAc,GACrBC,EAAU,CACZ,iBAAiB,UACjB,gBAAgB,KAChB,qBAAqB,UC9IF,CACnB,CACI,QAAW,cACX,WAAc,YAElB,CACI,QAAW,UACX,WAAc,WAElB,CACI,QAAW,UACX,WAAc,YAElB,CACI,QAAW,iBACX,WAAc,SAElB,CACI,QAAW,UACX,WAAc,SAElB,CACI,QAAW,SACX,WAAc,YAElB,CACI,QAAW,WACX,WAAc,SAElB,CACI,QAAW,aACX,WAAc,MAElB,CACI,QAAW,sBACX,WAAc,UAElB,CACI,QAAW,YACX,WAAc,YAElB,CACI,QAAW,UACX,WAAc,WAElB,CACI,QAAW,QACX,WAAc,UAElB,CACI,QAAW,YACX,WAAc,YAElB,CACI,QAAW,UACX,WAAc,WAElB,CACI,QAAW,aACX,WAAc,WAElB,CACI,QAAW,UACX,WAAc,UAElB,CACI,QAAW,UACX,WAAc,WAElB,CACI,QAAW,aACX,WAAc,aAElB,CACI,QAAW,WACX,WAAc,UAElB,CACI,QAAW,UACX,WAAc,WAElB,CACI,QAAW,UACX,WAAc,YAElB,CACI,QAAW,SACX,WAAc,UAElB,CACI,QAAW,QACX,WAAc,YAElB,CACI,QAAW,UACX,WAAc,SAElB,CACI,QAAW,SACX,WAAc,UAElB,CACI,QAAW,UACX,WAAc,YAElB,CACI,QAAW,yBACX,WAAc,WAElB,CACI,QAAW,WACX,WAAc,WAElB,CACI,QAAW,gBACX,WAAc,MAElB,CACI,QAAW,SACX,WAAc,aAElB,CACI,QAAW,iCACX,WAAc,MAElB,CACI,QAAW,SACX,WAAc,UAElB,CACI,QAAW,WACX,WAAc,WAElB,CACI,QAAW,eACX,WAAc,YAElB,CACI,QAAW,UACX,WAAc,YAElB,CACI,QAAW,WACX,WAAc,YAElB,CACI,QAAW,WACX,WAAc,YAElB,CACI,QAAW,SACX,WAAc,YAElB,CACI,QAAW,aACX,WAAc,UAElB,CACI,QAAW,iBACX,WAAc,SAElB,CACI,QAAW,2BACX,WAAc,WAElB,CACI,QAAW,OACX,WAAc,YAElB,CACI,QAAW,QACX,WAAc,YAElB,CACI,QAAW,QACX,WAAc,cAElB,CACI,QAAW,mBACX,WAAc,QAElB,CACI,QAAW,0BACX,WAAc,OAElB,CACI,QAAW,WACX,WAAc,YAElB,CACI,QAAW,UACX,WAAc,UAElB,CACI,QAAW,QACX,WAAc,WAElB,CACI,QAAW,eACX,WAAc,SAElB,CACI,QAAW,aACX,WAAc,WAElB,CACI,QAAW,UACX,WAAc,WAElB,CACI,QAAW,OACX,WAAc,YAElB,CACI,QAAW,SACX,WAAc,WAElB,CACI,QAAW,iBACX,WAAc,YAElB,CACI,QAAW,UACX,WAAc,WAElB,CACI,QAAW,WACX,WAAc,UAElB,CACI,QAAW,WACX,WAAc,SAElB,CACI,QAAW,qBACX,WAAc,YAElB,CACI,QAAW,aACX,WAAc,WAElB,CACI,QAAW,UACX,WAAc,YAElB,CACI,QAAW,QACX,WAAc,YAElB,CACI,QAAW,cACX,WAAc,WAElB,CACI,QAAW,UACX,WAAc,MAElB,CACI,QAAW,oBACX,WAAc,WAElB,CACI,QAAW,UACX,WAAc,WAElB,CACI,QAAW,UACX,WAAc,WAElB,CACI,QAAW,WACX,WAAc,aAElB,CACI,QAAW,mBACX,WAAc,QAElB,CACI,QAAW,gBACX,WAAc,SAElB,CACI,QAAW,eACX,WAAc,UAElB,CACI,QAAW,UACX,WAAc,WAElB,CACI,QAAW,SACX,WAAc,YAElB,CACI,QAAW,gBACX,WAAc,UAElB,CACI,QAAW,mBACX,WAAc,UAElB,CACI,QAAW,8BACX,WAAc,MAElB,CACI,QAAW,QACX,WAAc,WAElB,CACI,QAAW,SACX,WAAc,WAElB,CACI,QAAW,UACX,WAAc,WAElB,CACI,QAAW,UACX,WAAc,YAElB,CACI,QAAW,QACX,WAAc,YAElB,CACI,QAAW,YACX,WAAc,SAElB,CACI,QAAW,SACX,WAAc,YAElB,CACI,QAAW,YACX,WAAc,SAElB,CACI,QAAW,UACX,WAAc,UAElB,CACI,QAAW,aACX,WAAc,UAElB,CACI,QAAW,OACX,WAAc,UAElB,CACI,QAAW,YACX,WAAc,YAElB,CACI,QAAW,SACX,WAAc,YAElB,CACI,QAAW,gBACX,WAAc,WAElB,CACI,QAAW,SACX,WAAc,UAElB,CACI,QAAW,QACX,WAAc,YAElB,CACI,QAAW,oCACX,WAAc,MAElB,CACI,QAAW,gCACX,WAAc,QAElB,CACI,QAAW,WACX,WAAc,WAElB,CACI,QAAW,YACX,WAAc,WAElB,CACI,QAAW,UACX,WAAc,WAElB,CACI,QAAW,UACX,WAAc,UAElB,CACI,QAAW,QACX,WAAc,cAElB,CACI,QAAW,YACX,WAAc,aAElB,CACI,QAAW,OACX,WAAc,YAElB,CACI,QAAW,OACX,WAAc,YAElB,CACI,QAAW,UACX,WAAc,WAElB,CACI,QAAW,SACX,WAAc,WAElB,CACI,QAAW,QACX,WAAc,YAElB,CACI,QAAW,cACX,WAAc,YAElB,CACI,QAAW,UACX,WAAc,WAElB,CACI,QAAW,QACX,WAAc,aAElB,CACI,QAAW,SACX,WAAc,WAElB,CACI,QAAW,aACX,WAAc,YAElB,CACI,QAAW,QACX,WAAc,YAElB,CACI,QAAW,WACX,WAAc,UAElB,CACI,QAAW,SACX,WAAc,WAElB,CACI,QAAW,aACX,WAAc,WAElB,CACI,QAAW,OACX,WAAc,WAElB,CACI,QAAW,SACX,WAAc,WAElB,CACI,QAAW,UACX,WAAc,WAElB,CACI,QAAW,UACX,WAAc,WAElB,CACI,QAAW,UACX,WAAc,WAElB,CACI,QAAW,yBACX,WAAc,WAElB,CACI,QAAW,gBACX,WAAc,SAElB,CACI,QAAW,YACX,WAAc,WAElB,CACI,QAAW,aACX,WAAc,UAElB,CACI,QAAW,QACX,WAAc,UAElB,CACI,QAAW,kBACX,WAAc,WAElB,CACI,QAAW,aACX,WAAc,YAElB,CACI,QAAW,SACX,WAAc,YAElB,CACI,QAAW,WACX,WAAc,YAElB,CACI,QAAW,WACX,WAAc,UAElB,CACI,QAAW,OACX,WAAc,YAElB,CACI,QAAW,QACX,WAAc,UAElB,CACI,QAAW,mBACX,WAAc,SAElB,CACI,QAAW,aACX,WAAc,UAElB,CACI,QAAW,aACX,WAAc,WAElB,CACI,QAAW,YACX,WAAc,WAElB,CACI,QAAW,UACX,WAAc,UAElB,CACI,QAAW,SACX,WAAc,aAElB,CACI,QAAW,kCACX,WAAc,MAElB,CACI,QAAW,UACX,WAAc,WAElB,CACI,QAAW,SACX,WAAc,SAElB,CACI,QAAW,WACX,WAAc,WAElB,CACI,QAAW,aACX,WAAc,QAElB,CACI,QAAW,UACX,WAAc,YAElB,CACI,QAAW,aACX,WAAc,YAElB,CACI,QAAW,UACX,WAAc,YAElB,CACI,QAAW,UACX,WAAc,WAElB,CACI,QAAW,QACX,WAAc,SAElB,CACI,QAAW,QACX,WAAc,YAElB,CACI,QAAW,cACX,WAAc,YAElB,CACI,QAAW,uBACX,WAAc,UAElB,CACI,QAAW,gBACX,WAAc,UAElB,CACI,QAAW,cACX,WAAc,WAElB,CACI,QAAW,YACX,WAAc,WAElB,CACI,QAAW,QACX,WAAc,YAElB,CACI,QAAW,UACX,WAAc,aAElB,CACI,QAAW,OACX,WAAc,QAElB,CACI,QAAW,iBACX,WAAc,QAElB,CACI,QAAW,cACX,WAAc,YAElB,CACI,QAAW,mBACX,WAAc,MAElB,CACI,QAAW,2BACX,WAAc,SAElB,CACI,QAAW,SACX,WAAc,WAElB,CACI,QAAW,OACX,WAAc,WAElB,CACI,QAAW,WACX,WAAc,aAElB,CACI,QAAW,QACX,WAAc,SAElB,CACI,QAAW,YACX,WAAc,WAElB,CACI,QAAW,SACX,WAAc,WAElB,CACI,QAAW,mBACX,WAAc,WAElB,CACI,QAAW,WACX,WAAc,WAElB,CACI,QAAW,OACX,WAAc,YAElB,CACI,QAAW,cACX,WAAc,aAElB,CACI,QAAW,WACX,WAAc,MAElB,CACI,QAAW,SACX,WAAc,YAElB,CACI,QAAW,WACX,WAAc,YAElB,CACI,QAAW,cACX,WAAc,WAElB,CACI,QAAW,QACX,WAAc,WAElB,CACI,QAAW,UACX,WAAc,UAElB,CACI,QAAW,UACX,WAAc,YAElB,CACI,QAAW,qBACX,WAAc,aAElB,CACI,QAAW,SACX,WAAc,YAElB,CACI,QAAW,eACX,WAAc,QAElB,CACI,QAAW,wBACX,WAAc,SAElB,CACI,QAAW,cACX,WAAc,UAElB,CACI,QAAW,4BACX,WAAc,QAElB,CACI,QAAW,mCACX,WAAc,UAElB,CACI,QAAW,QACX,WAAc,UAElB,CACI,QAAW,aACX,WAAc,SAElB,CACI,QAAW,wBACX,WAAc,UAElB,CACI,QAAW,eACX,WAAc,YAElB,CACI,QAAW,WACX,WAAc,MAElB,CACI,QAAW,UACX,WAAc,YAElB,CACI,QAAW,aACX,WAAc,SAElB,CACI,QAAW,eACX,WAAc,WAElB,CACI,QAAW,YACX,WAAc,WAElB,CACI,QAAW,WACX,WAAc,WAElB,CACI,QAAW,WACX,WAAc,WAElB,CACI,QAAW,kBACX,WAAc,UAElB,CACI,QAAW,UACX,WAAc,YAElB,CACI,QAAW,eACX,WAAc,YAElB,CACI,QAAW,+CACX,WAAc,MAElB,CACI,QAAW,cACX,WAAc,YAElB,CACI,QAAW,cACX,WAAc,YAElB,CACI,QAAW,QACX,WAAc,YAElB,CACI,QAAW,WACX,WAAc,YAElB,CACI,QAAW,QACX,WAAc,YAElB,CACI,QAAW,WACX,WAAc,UAElB,CACI,QAAW,yBACX,WAAc,QAElB,CACI,QAAW,YACX,WAAc,WAElB,CACI,QAAW,SACX,WAAc,WAElB,CACI,QAAW,cACX,WAAc,WAElB,CACI,QAAW,QACX,WAAc,YAElB,CACI,QAAW,aACX,WAAc,WAElB,CACI,QAAW,WACX,WAAc,YAElB,CACI,QAAW,WACX,WAAc,YAElB,CACI,QAAW,mCACX,WAAc,MAElB,CACI,QAAW,OACX,WAAc,WAElB,CACI,QAAW,UACX,WAAc,QAElB,CACI,QAAW,QACX,WAAc,UAElB,CACI,QAAW,sBACX,WAAc,WAElB,CACI,QAAW,UACX,WAAc,YAElB,CACI,QAAW,SACX,WAAc,YAElB,CACI,QAAW,eACX,WAAc,WAElB,CACI,QAAW,2BACX,WAAc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","file":"static/js/main.74c33042.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"dc/dist/style/dc.css\";\nimport { csv } from \"d3-fetch\";\n// import { cross, rollups } from \"d3-array\";\nimport * as d3a from \"d3-array\" ;\nimport moment from \"moment\";\nimport crossfilter from \"crossfilter2\";\nexport const CXContext = React.createContext(\"CXContext\");\n\nexport default class DataContext extends Component {\n    state = {\n        detailData: null,\n        detailDataW: null,\n        deathData: null,\n        detailDataW: null,\n        loading: false,\n        hasCF: false\n    };\n    componentDidMount() {\n        if (this.state.hasCF) {\n            return;\n        }\n        if (this.state.loading) {\n            return;\n        }\n        this.dims = {}\n        const dateFormat = \"D-MMM-YYYY\";\n        const urlBase =\n            \"https://docs.google.com/spreadsheets/d/1C59nxtgcnwGyo6lgypsgN18duxmwWigjeVdKY58t0mU/gviz/tq?tqx=out:csv&sheet=\";\n        const url = urlBase + \"Det\";\n        const url2g = urlBase + \"Dth\";\n        this.setState({ loading: true });\n\n        const processDetailData = data => {\n            data.forEach(d => {\n                d.Date = moment(d.Date + \"-2020\", dateFormat);\n                d.Total = parseFloat(d.Cases);\n            });\n            data = data.filter(x => x.Prov !== \"RC\");\n            const cf = crossfilter(data);\n            const clonedData = JSON.parse(JSON.stringify(data));\n            clonedData.forEach(x => {\n                x.Date = moment(x.Date);\n            });\n            const cfn = crossfilter(clonedData);\n\n            this.dims['detailC']={\n                date: cf.dimension(d => d.Date), \n                dateN: cfn.dimension(d => d.Date),\n                prov: cf.dimension(d => d.Prov), \n                provN: cfn.dimension(d => d.Prov)\n            };\n            return data;\n        };\n\n        const processDeathData = data => {\n            data.forEach(d => {\n                d.Date = moment(d[\"Announced\"] + \"-2020\", dateFormat);\n                d.Total = parseFloat(d.Deaths);\n            });\n            data = data.filter(x => x.Prov !== \"RC\");\n            const cfd = crossfilter(data);\n            const clonedData = JSON.parse(JSON.stringify(data));\n            clonedData.forEach(x => {\n                x.Date = moment(x.Date);\n            });\n            const cfdn = crossfilter(clonedData);\n            this.dims['deathC']={\n                date: cfd.dimension(d => d.Date), \n                dateN: cfdn.dimension(d => d.Date),\n                prov: cfd.dimension(d => d.Prov), \n                provN: cfdn.dimension(d => d.Prov)\n            };\n            return data;\n        };\n        //backup URL's in case there are CORS errors\n        const backupUrlBase = \"https://cors-anywhere.herokuapp.com/\";\n        const backupUrl = backupUrlBase + url;\n        const backupUrl2 = backupUrlBase + url2g;\n\n        // const p1 = csv(url)\n        //     .then(processDetailData)\n        //     .catch(error => {\n        //         console.log(\"failed with url\", error);\n        //         return csv(backupUrl)\n        //             .then(processDeathData)\n        //             .catch(error => {\n        //                 console.log(\"backuperror 1\", error);\n        //             });\n        //     });\n\n        // const p2 = csv(url2g)\n        //     .then(processDeathData)\n        //     .catch(error => {\n        //         console.log(\"failed with url2\", error);\n        //         return csv(backupUrl2)\n        //             .then(processDeathData)\n        //             .catch(error => {\n        //                 console.log(\"backuperror 2\", error);\n        //             });\n        //     });\n\n\n\n        // const urlWorld = \"https://rawcdn.githack.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv\"\n        // const urlWorldD = \"https://rawcdn.githack.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv\"\n        const urlWorld = \"https://cdn.jsdelivr.net/gh/CSSEGISandData/COVID-19@master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv\"\n\n        const urlWorldD = \"https://cdn.jsdelivr.net/gh/CSSEGISandData/COVID-19@master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv\"\n\n        const processJHData = (url, key) =>{\n            const p = csv(url, {cache:'no-cache'}).then(data => {\n            const dd = d3a.cross(data.columns.slice(4), data, (ddate, d) => ({\n                    date: ddate,\n                    country: d[\"Country/Region\"],\n                    region: d[\"Province/State\"] ? d[\"Province/State\"] : null,\n                    value: parseFloat(d[ddate]),\n                    lat: parseFloat(d.Lat),\n                    lon: parseFloat(d.Long)\n                }));\n            const q = Array.from(\n                d3a.rollups(\n                    dd,\n                    d => d3a.sum(d, v => +v.value),\n                    d => d.country,\n                    d => d.date\n                )\n            );\n            const totals=q.map(x=>{\n                return {country: x[0], total:parseInt(x[1][x[1].length-1][1]) }\n            })\n            totals.sort((a,b)=>-a.total+b.total);\n            const keepAmount = 13; //Number of countries for which to keep data\n            const keep = totals.slice(0,keepAmount-3).map(x=>x.country);\n            const must_have = ['Canada','Pakistan','Estonia'];\n            must_have.forEach(x=>{\n                keep.push(x);\n            });\n            const out = [];\n            q.forEach(x => {\n                const country = x[0];\n                if(keep.includes(country)){\n                for (let i = 0; i < x[1].length; i++) {\n                    const total = i === 0 ? x[1][i][1] : x[1][i][1] - x[1][i - 1][1];\n                    if(i>0 && total==0){\n                        continue\n                    }\n                    out.push({\n                        Prov:country,\n                        Date: moment(x[1][i][0],\"M/DD/YY\"),\n                        Total: total\n                    });\n                }\n            }\n            });\n            const cfw = crossfilter(out);\n            const clonedData = JSON.parse(JSON.stringify(out));\n            clonedData.forEach(x => {\n                x.Date = moment(x.Date);\n            });\n            const cfwn = crossfilter(clonedData);\n            this.dims[key] = {\n                date: cfw.dimension(d => d.Date), \n                prov: cfw.dimension(d => d.Prov),\n                dateN: cfwn.dimension(d => d.Date), \n                provN: cfwn.dimension(d => d.Prov)\n            };\n            return out;\n        });\n        return p;\n        }\n        const p3 = processJHData(urlWorld, 'detailW');\n        const p4 = processJHData(urlWorldD, 'deathsW');\n        // Promise.all([p1,p2, p3, p4]).then(x => {\n        Promise.all([p3, p4]).then(x => {\n            console.log(\"Done fetching data\");\n\n            this.setState({\n                loading: false,\n                hasCF: true,\n                detailData: x[0],\n                deathData: x[1],\n                worldDetailData: x[2],\n                worldDeathData: x[3]\n            });\n        });\n    }\n    render() {\n        if (!this.state.hasCF) {\n            return null;\n        }\n        return (\n            <CXContext.Provider\n                value={{\n                    dimensions: this.dims\n                }}\n            >\n                <div ref={this.parent}>{this.props.children}</div>\n            </CXContext.Provider>\n        );\n    }\n}\n","import { rgb } from \"d3-color\";\nimport { useState, useEffect } from \"react\";\nimport {popData}  from \"./data/country-by-population\";\n\nexport const colorf = () => {\n    //http://tsitsul.in/blog/coloropt/\n    const cols = [\n        [235, 172, 35],\n        [184, 0, 88],\n        [0, 140, 249],\n        [0, 110, 0],\n        [0, 187, 173],\n        [209, 99, 230],\n        [178, 69, 2],\n        [255, 146, 135],\n        [89, 84, 214],\n        [0, 198, 248],\n        [135, 133, 0],\n        [0, 167, 108],\n        [189, 189, 189]\n    ];\n    return cols.map(x =>\n        rgb(x[0], x[1], x[2])\n            .darker(.5)\n            .formatHex()\n    );\n};\n\nexport const sortpc = (provinces, colors) => {\n    const merged = [];\n    for (let i = 0; i < provinces.length; i++) {\n        merged.push({ a1: provinces[i], a2: colors[i] });\n    }\n    merged.sort((x, y) => x.a1.value - y.a1.value);\n    for (let i = 0; i < merged.length; i++) {\n        provinces[i] = merged[i].a1;\n        colors[i] = merged[i].a2;\n    }\n    // console.log(provinces, colors);\n};\n\nexport const population = {\n    ON: 14.71,\n    QC: 8.53,\n    BC: 5.11,\n    AB: 4.41,\n    SK: 1.18,\n    NL: 0.52,\n    NS: 0.98,\n    MB: 1.38,\n    NB: 0.78,\n    PE: 0.16,\n    YT: 0.041,\n    NT: 0.044,\n    NU: 0.039\n};\n\n\nfunction getWindowDimensions() {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height\n  };\n}\n\nexport function useWindowDimensions() {\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return windowDimensions;\n}\n\nexport function totalReduce(group){\n    const res = group.reduce(\n            (p, v) => {\n                return p + v.Total;\n            },\n            (p, v) => {\n                return p - v.Total;\n            },\n            () => 0\n        );\n    return res;\n}\n\nexport function provinceTotalReduce(group){\n    const pCounts = group.reduce(\n        (p, v) => {\n            p[v.Prov] = (p[v.Prov] || 0) + v.Total;\n            return p;\n        },\n        (p, v) => {\n            p[v.Prov] = p[v.Prov] - v.Total;\n            return p;\n        },\n        () => ({})\n    );\n    return pCounts;\n}\n\nexport const accumulateGroup = (source_group) => {\n    return {\n        all: function() {\n            const sa = source_group.all();\n            const cumulate = {};\n            const res = [];\n            for (const el of sa) {\n                for (let [k, v] of Object.entries(el.value)) {\n                    cumulate[k] = (cumulate[k] || 0) + v;\n                }\n                res.push({ key: el.key, value: { ...cumulate } });\n            }\n            return res;\n        }\n    };\n}\nexport const accumulateGroupTotal = (source_group)=>{\n    return {\n        all: function() {\n            const sa = source_group.all();\n            let cumulate = 0;\n            const res = [];\n            for (const el of sa) {\n                cumulate += el.value;\n                res.push({ key: el.key, value: cumulate });\n            }\n            return res;\n        }\n    };\n}\nexport const populationW = {};\nconst renames = {\n    \"Czech Republic\":\"Czechia\",\n    \"United States\":\"US\",\n    \"Russian Federation\":\"Russia\"\n}\npopData.forEach(x=>{\n    const name = renames.hasOwnProperty(x.country)? renames[x.country]:x.country;\n    populationW[name]=(+x.population)/1e6;\n});","// from https://github.com/samayo/country-json/blob/master/src/country-by-population.json\nexport const popData = [\n    {\n        \"country\": \"Afghanistan\",\n        \"population\": \"35530081\"\n    },\n    {\n        \"country\": \"Albania\",\n        \"population\": \"2930187\"\n    },\n    {\n        \"country\": \"Algeria\",\n        \"population\": \"41318142\"\n    },\n    {\n        \"country\": \"American Samoa\",\n        \"population\": \"55641\"\n    },\n    {\n        \"country\": \"Andorra\",\n        \"population\": \"76965\"\n    },\n    {\n        \"country\": \"Angola\",\n        \"population\": \"29784193\"\n    },\n    {\n        \"country\": \"Anguilla\",\n        \"population\": \"14909\"\n    },\n    {\n        \"country\": \"Antarctica\",\n        \"population\": null\n    },\n    {\n        \"country\": \"Antigua and Barbuda\",\n        \"population\": \"102012\"\n    },\n    {\n        \"country\": \"Argentina\",\n        \"population\": \"44271041\"\n    },\n    {\n        \"country\": \"Armenia\",\n        \"population\": \"2930450\"\n    },\n    {\n        \"country\": \"Aruba\",\n        \"population\": \"105264\"\n    },\n    {\n        \"country\": \"Australia\",\n        \"population\": \"24450561\"\n    },\n    {\n        \"country\": \"Austria\",\n        \"population\": \"8735453\"\n    },\n    {\n        \"country\": \"Azerbaijan\",\n        \"population\": \"9827589\"\n    },\n    {\n        \"country\": \"Bahamas\",\n        \"population\": \"395361\"\n    },\n    {\n        \"country\": \"Bahrain\",\n        \"population\": \"1492584\"\n    },\n    {\n        \"country\": \"Bangladesh\",\n        \"population\": \"164669751\"\n    },\n    {\n        \"country\": \"Barbados\",\n        \"population\": \"285719\"\n    },\n    {\n        \"country\": \"Belarus\",\n        \"population\": \"9468338\"\n    },\n    {\n        \"country\": \"Belgium\",\n        \"population\": \"11429336\"\n    },\n    {\n        \"country\": \"Belize\",\n        \"population\": \"374681\"\n    },\n    {\n        \"country\": \"Benin\",\n        \"population\": \"11175692\"\n    },\n    {\n        \"country\": \"Bermuda\",\n        \"population\": \"61349\"\n    },\n    {\n        \"country\": \"Bhutan\",\n        \"population\": \"807610\"\n    },\n    {\n        \"country\": \"Bolivia\",\n        \"population\": \"11051600\"\n    },\n    {\n        \"country\": \"Bosnia and Herzegovina\",\n        \"population\": \"3507017\"\n    },\n    {\n        \"country\": \"Botswana\",\n        \"population\": \"2291661\"\n    },\n    {\n        \"country\": \"Bouvet Island\",\n        \"population\": null\n    },\n    {\n        \"country\": \"Brazil\",\n        \"population\": \"209288278\"\n    },\n    {\n        \"country\": \"British Indian Ocean Territory\",\n        \"population\": null\n    },\n    {\n        \"country\": \"Brunei\",\n        \"population\": \"428697\"\n    },\n    {\n        \"country\": \"Bulgaria\",\n        \"population\": \"7084571\"\n    },\n    {\n        \"country\": \"Burkina Faso\",\n        \"population\": \"19193382\"\n    },\n    {\n        \"country\": \"Burundi\",\n        \"population\": \"10864245\"\n    },\n    {\n        \"country\": \"Cambodia\",\n        \"population\": \"16005373\"\n    },\n    {\n        \"country\": \"Cameroon\",\n        \"population\": \"24053727\"\n    },\n    {\n        \"country\": \"Canada\",\n        \"population\": \"36624199\"\n    },\n    {\n        \"country\": \"Cape Verde\",\n        \"population\": \"546388\"\n    },\n    {\n        \"country\": \"Cayman Islands\",\n        \"population\": \"61559\"\n    },\n    {\n        \"country\": \"Central African Republic\",\n        \"population\": \"4659080\"\n    },\n    {\n        \"country\": \"Chad\",\n        \"population\": \"14899994\"\n    },\n    {\n        \"country\": \"Chile\",\n        \"population\": \"18054726\"\n    },\n    {\n        \"country\": \"China\",\n        \"population\": \"1409517397\"\n    },\n    {\n        \"country\": \"Christmas Island\",\n        \"population\": \"2500\"\n    },\n    {\n        \"country\": \"Cocos (Keeling) Islands\",\n        \"population\": \"600\"\n    },\n    {\n        \"country\": \"Colombia\",\n        \"population\": \"49065615\"\n    },\n    {\n        \"country\": \"Comoros\",\n        \"population\": \"813912\"\n    },\n    {\n        \"country\": \"Congo\",\n        \"population\": \"5260750\"\n    },\n    {\n        \"country\": \"Cook Islands\",\n        \"population\": \"17380\"\n    },\n    {\n        \"country\": \"Costa Rica\",\n        \"population\": \"4905769\"\n    },\n    {\n        \"country\": \"Croatia\",\n        \"population\": \"4189353\"\n    },\n    {\n        \"country\": \"Cuba\",\n        \"population\": \"11484636\"\n    },\n    {\n        \"country\": \"Cyprus\",\n        \"population\": \"1179551\"\n    },\n    {\n        \"country\": \"Czech Republic\",\n        \"population\": \"10618303\"\n    },\n    {\n        \"country\": \"Denmark\",\n        \"population\": \"5733551\"\n    },\n    {\n        \"country\": \"Djibouti\",\n        \"population\": \"956985\"\n    },\n    {\n        \"country\": \"Dominica\",\n        \"population\": \"73925\"\n    },\n    {\n        \"country\": \"Dominican Republic\",\n        \"population\": \"10766998\"\n    },\n    {\n        \"country\": \"East Timor\",\n        \"population\": \"1296311\"\n    },\n    {\n        \"country\": \"Ecuador\",\n        \"population\": \"16624858\"\n    },\n    {\n        \"country\": \"Egypt\",\n        \"population\": \"97553151\"\n    },\n    {\n        \"country\": \"El Salvador\",\n        \"population\": \"6377853\"\n    },\n    {\n        \"country\": \"England\",\n        \"population\": null\n    },\n    {\n        \"country\": \"Equatorial Guinea\",\n        \"population\": \"1267689\"\n    },\n    {\n        \"country\": \"Eritrea\",\n        \"population\": \"5068831\"\n    },\n    {\n        \"country\": \"Estonia\",\n        \"population\": \"1309632\"\n    },\n    {\n        \"country\": \"Ethiopia\",\n        \"population\": \"104957438\"\n    },\n    {\n        \"country\": \"Falkland Islands\",\n        \"population\": \"2910\"\n    },\n    {\n        \"country\": \"Faroe Islands\",\n        \"population\": \"49290\"\n    },\n    {\n        \"country\": \"Fiji Islands\",\n        \"population\": \"905502\"\n    },\n    {\n        \"country\": \"Finland\",\n        \"population\": \"5523231\"\n    },\n    {\n        \"country\": \"France\",\n        \"population\": \"64979548\"\n    },\n    {\n        \"country\": \"French Guiana\",\n        \"population\": \"282731\"\n    },\n    {\n        \"country\": \"French Polynesia\",\n        \"population\": \"283007\"\n    },\n    {\n        \"country\": \"French Southern territories\",\n        \"population\": null\n    },\n    {\n        \"country\": \"Gabon\",\n        \"population\": \"2025137\"\n    },\n    {\n        \"country\": \"Gambia\",\n        \"population\": \"2100568\"\n    },\n    {\n        \"country\": \"Georgia\",\n        \"population\": \"3912061\"\n    },\n    {\n        \"country\": \"Germany\",\n        \"population\": \"82114224\"\n    },\n    {\n        \"country\": \"Ghana\",\n        \"population\": \"28833629\"\n    },\n    {\n        \"country\": \"Gibraltar\",\n        \"population\": \"34571\"\n    },\n    {\n        \"country\": \"Greece\",\n        \"population\": \"11159773\"\n    },\n    {\n        \"country\": \"Greenland\",\n        \"population\": \"56480\"\n    },\n    {\n        \"country\": \"Grenada\",\n        \"population\": \"107825\"\n    },\n    {\n        \"country\": \"Guadeloupe\",\n        \"population\": \"449568\"\n    },\n    {\n        \"country\": \"Guam\",\n        \"population\": \"164229\"\n    },\n    {\n        \"country\": \"Guatemala\",\n        \"population\": \"16913503\"\n    },\n    {\n        \"country\": \"Guinea\",\n        \"population\": \"12717176\"\n    },\n    {\n        \"country\": \"Guinea-Bissau\",\n        \"population\": \"1861283\"\n    },\n    {\n        \"country\": \"Guyana\",\n        \"population\": \"777859\"\n    },\n    {\n        \"country\": \"Haiti\",\n        \"population\": \"10981229\"\n    },\n    {\n        \"country\": \"Heard Island and McDonald Islands\",\n        \"population\": null\n    },\n    {\n        \"country\": \"Holy See (Vatican City State)\",\n        \"population\": \"1000\"\n    },\n    {\n        \"country\": \"Honduras\",\n        \"population\": \"9265067\"\n    },\n    {\n        \"country\": \"Hong Kong\",\n        \"population\": \"7364883\"\n    },\n    {\n        \"country\": \"Hungary\",\n        \"population\": \"9721559\"\n    },\n    {\n        \"country\": \"Iceland\",\n        \"population\": \"335025\"\n    },\n    {\n        \"country\": \"India\",\n        \"population\": \"1339180127\"\n    },\n    {\n        \"country\": \"Indonesia\",\n        \"population\": \"263991379\"\n    },\n    {\n        \"country\": \"Iran\",\n        \"population\": \"81162788\"\n    },\n    {\n        \"country\": \"Iraq\",\n        \"population\": \"38274618\"\n    },\n    {\n        \"country\": \"Ireland\",\n        \"population\": \"4761657\"\n    },\n    {\n        \"country\": \"Israel\",\n        \"population\": \"8321570\"\n    },\n    {\n        \"country\": \"Italy\",\n        \"population\": \"59359900\"\n    },\n    {\n        \"country\": \"Ivory Coast\",\n        \"population\": \"24294750\"\n    },\n    {\n        \"country\": \"Jamaica\",\n        \"population\": \"2890299\"\n    },\n    {\n        \"country\": \"Japan\",\n        \"population\": \"127484450\"\n    },\n    {\n        \"country\": \"Jordan\",\n        \"population\": \"9702353\"\n    },\n    {\n        \"country\": \"Kazakhstan\",\n        \"population\": \"18204499\"\n    },\n    {\n        \"country\": \"Kenya\",\n        \"population\": \"49699862\"\n    },\n    {\n        \"country\": \"Kiribati\",\n        \"population\": \"116398\"\n    },\n    {\n        \"country\": \"Kuwait\",\n        \"population\": \"4136528\"\n    },\n    {\n        \"country\": \"Kyrgyzstan\",\n        \"population\": \"6045117\"\n    },\n    {\n        \"country\": \"Laos\",\n        \"population\": \"6858160\"\n    },\n    {\n        \"country\": \"Latvia\",\n        \"population\": \"1949670\"\n    },\n    {\n        \"country\": \"Lebanon\",\n        \"population\": \"6082357\"\n    },\n    {\n        \"country\": \"Lesotho\",\n        \"population\": \"2233339\"\n    },\n    {\n        \"country\": \"Liberia\",\n        \"population\": \"4731906\"\n    },\n    {\n        \"country\": \"Libyan Arab Jamahiriya\",\n        \"population\": \"5605000\"\n    },\n    {\n        \"country\": \"Liechtenstein\",\n        \"population\": \"37922\"\n    },\n    {\n        \"country\": \"Lithuania\",\n        \"population\": \"2890297\"\n    },\n    {\n        \"country\": \"Luxembourg\",\n        \"population\": \"583455\"\n    },\n    {\n        \"country\": \"Macao\",\n        \"population\": \"473000\"\n    },\n    {\n        \"country\": \"North Macedonia\",\n        \"population\": \"2024000\"\n    },\n    {\n        \"country\": \"Madagascar\",\n        \"population\": \"25570895\"\n    },\n    {\n        \"country\": \"Malawi\",\n        \"population\": \"18622104\"\n    },\n    {\n        \"country\": \"Malaysia\",\n        \"population\": \"31624264\"\n    },\n    {\n        \"country\": \"Maldives\",\n        \"population\": \"436330\"\n    },\n    {\n        \"country\": \"Mali\",\n        \"population\": \"18541980\"\n    },\n    {\n        \"country\": \"Malta\",\n        \"population\": \"430835\"\n    },\n    {\n        \"country\": \"Marshall Islands\",\n        \"population\": \"53127\"\n    },\n    {\n        \"country\": \"Martinique\",\n        \"population\": \"384896\"\n    },\n    {\n        \"country\": \"Mauritania\",\n        \"population\": \"4420184\"\n    },\n    {\n        \"country\": \"Mauritius\",\n        \"population\": \"1265138\"\n    },\n    {\n        \"country\": \"Mayotte\",\n        \"population\": \"253045\"\n    },\n    {\n        \"country\": \"Mexico\",\n        \"population\": \"129163276\"\n    },\n    {\n        \"country\": \"Micronesia, Federated States of\",\n        \"population\": null\n    },\n    {\n        \"country\": \"Moldova\",\n        \"population\": \"4051212\"\n    },\n    {\n        \"country\": \"Monaco\",\n        \"population\": \"38695\"\n    },\n    {\n        \"country\": \"Mongolia\",\n        \"population\": \"3075647\"\n    },\n    {\n        \"country\": \"Montserrat\",\n        \"population\": \"5177\"\n    },\n    {\n        \"country\": \"Morocco\",\n        \"population\": \"35739580\"\n    },\n    {\n        \"country\": \"Mozambique\",\n        \"population\": \"29668834\"\n    },\n    {\n        \"country\": \"Myanmar\",\n        \"population\": \"53370609\"\n    },\n    {\n        \"country\": \"Namibia\",\n        \"population\": \"2533794\"\n    },\n    {\n        \"country\": \"Nauru\",\n        \"population\": \"11359\"\n    },\n    {\n        \"country\": \"Nepal\",\n        \"population\": \"29304998\"\n    },\n    {\n        \"country\": \"Netherlands\",\n        \"population\": \"17035938\"\n    },\n    {\n        \"country\": \"Netherlands Antilles\",\n        \"population\": \"217000\"\n    },\n    {\n        \"country\": \"New Caledonia\",\n        \"population\": \"276255\"\n    },\n    {\n        \"country\": \"New Zealand\",\n        \"population\": \"4705818\"\n    },\n    {\n        \"country\": \"Nicaragua\",\n        \"population\": \"6217581\"\n    },\n    {\n        \"country\": \"Niger\",\n        \"population\": \"21477348\"\n    },\n    {\n        \"country\": \"Nigeria\",\n        \"population\": \"190886311\"\n    },\n    {\n        \"country\": \"Niue\",\n        \"population\": \"1618\"\n    },\n    {\n        \"country\": \"Norfolk Island\",\n        \"population\": \"2000\"\n    },\n    {\n        \"country\": \"North Korea\",\n        \"population\": \"25490965\"\n    },\n    {\n        \"country\": \"Northern Ireland\",\n        \"population\": null\n    },\n    {\n        \"country\": \"Northern Mariana Islands\",\n        \"population\": \"55144\"\n    },\n    {\n        \"country\": \"Norway\",\n        \"population\": \"5305383\"\n    },\n    {\n        \"country\": \"Oman\",\n        \"population\": \"4636262\"\n    },\n    {\n        \"country\": \"Pakistan\",\n        \"population\": \"197015955\"\n    },\n    {\n        \"country\": \"Palau\",\n        \"population\": \"21729\"\n    },\n    {\n        \"country\": \"Palestine\",\n        \"population\": \"4920724\"\n    },\n    {\n        \"country\": \"Panama\",\n        \"population\": \"4098587\"\n    },\n    {\n        \"country\": \"Papua New Guinea\",\n        \"population\": \"8251162\"\n    },\n    {\n        \"country\": \"Paraguay\",\n        \"population\": \"6811297\"\n    },\n    {\n        \"country\": \"Peru\",\n        \"population\": \"32165485\"\n    },\n    {\n        \"country\": \"Philippines\",\n        \"population\": \"104918090\"\n    },\n    {\n        \"country\": \"Pitcairn\",\n        \"population\": \"50\"\n    },\n    {\n        \"country\": \"Poland\",\n        \"population\": \"38170712\"\n    },\n    {\n        \"country\": \"Portugal\",\n        \"population\": \"10329506\"\n    },\n    {\n        \"country\": \"Puerto Rico\",\n        \"population\": \"3663131\"\n    },\n    {\n        \"country\": \"Qatar\",\n        \"population\": \"2639211\"\n    },\n    {\n        \"country\": \"Reunion\",\n        \"population\": \"699000\"\n    },\n    {\n        \"country\": \"Romania\",\n        \"population\": \"19679306\"\n    },\n    {\n        \"country\": \"Russian Federation\",\n        \"population\": \"143989754\"\n    },\n    {\n        \"country\": \"Rwanda\",\n        \"population\": \"12208407\"\n    },\n    {\n        \"country\": \"Saint Helena\",\n        \"population\": \"4049\"\n    },\n    {\n        \"country\": \"Saint Kitts and Nevis\",\n        \"population\": \"55345\"\n    },\n    {\n        \"country\": \"Saint Lucia\",\n        \"population\": \"178844\"\n    },\n    {\n        \"country\": \"Saint Pierre and Miquelon\",\n        \"population\": \"6320\"\n    },\n    {\n        \"country\": \"Saint Vincent and the Grenadines\",\n        \"population\": \"109897\"\n    },\n    {\n        \"country\": \"Samoa\",\n        \"population\": \"196440\"\n    },\n    {\n        \"country\": \"San Marino\",\n        \"population\": \"33400\"\n    },\n    {\n        \"country\": \"Sao Tome and Principe\",\n        \"population\": \"204327\"\n    },\n    {\n        \"country\": \"Saudi Arabia\",\n        \"population\": \"32938213\"\n    },\n    {\n        \"country\": \"Scotland\",\n        \"population\": null\n    },\n    {\n        \"country\": \"Senegal\",\n        \"population\": \"15850567\"\n    },\n    {\n        \"country\": \"Seychelles\",\n        \"population\": \"94737\"\n    },\n    {\n        \"country\": \"Sierra Leone\",\n        \"population\": \"7557212\"\n    },\n    {\n        \"country\": \"Singapore\",\n        \"population\": \"5708844\"\n    },\n    {\n        \"country\": \"Slovakia\",\n        \"population\": \"5447662\"\n    },\n    {\n        \"country\": \"Slovenia\",\n        \"population\": \"2079976\"\n    },\n    {\n        \"country\": \"Solomon Islands\",\n        \"population\": \"611343\"\n    },\n    {\n        \"country\": \"Somalia\",\n        \"population\": \"14742523\"\n    },\n    {\n        \"country\": \"South Africa\",\n        \"population\": \"56717156\"\n    },\n    {\n        \"country\": \"South Georgia and the South Sandwich Islands\",\n        \"population\": null\n    },\n    {\n        \"country\": \"South Korea\",\n        \"population\": \"50982212\"\n    },\n    {\n        \"country\": \"South Sudan\",\n        \"population\": \"12575714\"\n    },\n    {\n        \"country\": \"Spain\",\n        \"population\": \"46354321\"\n    },\n    {\n        \"country\": \"SriLanka\",\n        \"population\": \"20876917\"\n    },\n    {\n        \"country\": \"Sudan\",\n        \"population\": \"40533330\"\n    },\n    {\n        \"country\": \"Suriname\",\n        \"population\": \"563402\"\n    },\n    {\n        \"country\": \"Svalbard and Jan Mayen\",\n        \"population\": \"3200\"\n    },\n    {\n        \"country\": \"Swaziland\",\n        \"population\": \"1008000\"\n    },\n    {\n        \"country\": \"Sweden\",\n        \"population\": \"9910701\"\n    },\n    {\n        \"country\": \"Switzerland\",\n        \"population\": \"8476005\"\n    },\n    {\n        \"country\": \"Syria\",\n        \"population\": \"18269868\"\n    },\n    {\n        \"country\": \"Tajikistan\",\n        \"population\": \"8921343\"\n    },\n    {\n        \"country\": \"Tanzania\",\n        \"population\": \"57310019\"\n    },\n    {\n        \"country\": \"Thailand\",\n        \"population\": \"69037513\"\n    },\n    {\n        \"country\": \"The Democratic Republic of Congo\",\n        \"population\": null\n    },\n    {\n        \"country\": \"Togo\",\n        \"population\": \"7797694\"\n    },\n    {\n        \"country\": \"Tokelau\",\n        \"population\": \"1300\"\n    },\n    {\n        \"country\": \"Tonga\",\n        \"population\": \"108020\"\n    },\n    {\n        \"country\": \"Trinidad and Tobago\",\n        \"population\": \"1369125\"\n    },\n    {\n        \"country\": \"Tunisia\",\n        \"population\": \"11532127\"\n    },\n    {\n        \"country\": \"Turkey\",\n        \"population\": \"80745020\"\n    },\n    {\n        \"country\": \"Turkmenistan\",\n        \"population\": \"5758075\"\n    },\n    {\n        \"country\": \"Turks and Caicos Islands\",\n        \"population\": \"35446\"\n    },\n    {\n        \"country\": \"Tuvalu\",\n        \"population\": \"11192\"\n    },\n    {\n        \"country\": \"Uganda\",\n        \"population\": \"42862958\"\n    },\n    {\n        \"country\": \"Ukraine\",\n        \"population\": \"44222947\"\n    },\n    {\n        \"country\": \"United Arab Emirates\",\n        \"population\": \"9400145\"\n    },\n    {\n        \"country\": \"United Kingdom\",\n        \"population\": \"66181585\"\n    },\n    {\n        \"country\": \"United States\",\n        \"population\": \"324459463\"\n    },\n    {\n        \"country\": \"United States Minor Outlying Islands\",\n        \"population\": null\n    },\n    {\n        \"country\": \"Uruguay\",\n        \"population\": \"3456750\"\n    },\n    {\n        \"country\": \"Uzbekistan\",\n        \"population\": \"31910641\"\n    },\n    {\n        \"country\": \"Vanuatu\",\n        \"population\": \"276244\"\n    },\n    {\n        \"country\": \"Venezuela\",\n        \"population\": \"31977065\"\n    },\n    {\n        \"country\": \"Vietnam\",\n        \"population\": \"95540800\"\n    },\n    {\n        \"country\": \"Virgin Islands, British\",\n        \"population\": null\n    },\n    {\n        \"country\": \"Virgin Islands, U.S.\",\n        \"population\": null\n    },\n    {\n        \"country\": \"Wales\",\n        \"population\": null\n    },\n    {\n        \"country\": \"Wallis and Futuna\",\n        \"population\": \"11773\"\n    },\n    {\n        \"country\": \"Western Sahara\",\n        \"population\": \"552628\"\n    },\n    {\n        \"country\": \"Yemen\",\n        \"population\": \"28250420\"\n    },\n    {\n        \"country\": \"Yugoslavia\",\n        \"population\": \"10640000\"\n    },\n    {\n        \"country\": \"Zambia\",\n        \"population\": \"17094130\"\n    },\n    {\n        \"country\": \"Zimbabwe\",\n        \"population\": \"16529904\"\n    }\n]","import React, { Fragment } from \"react\";\nimport { CXContext } from \"./cxContext\";\nimport * as dc from \"dc\";\nimport { css } from \"glamor\";\nimport { Header, Label, Icon, Popup } from \"semantic-ui-react\";\nimport { useWindowDimensions} from \"../util\";\n\nconst ResetButton = props => {\n    const style = css({\n        cursor: \"pointer\"\n    });\n    return (\n        <Label\n            {...style}\n            onClick={() => {\n                props.chart.filterAll();\n                dc.redrawAll(props.group);\n            }}\n        >\n            reset\n        </Label>\n    );\n};\nexport const ChartTemplate = props => {\n    const context = React.useContext(CXContext);\n    const [chart, updateChart] = React.useState(null);\n    const [chartData, updateChartData] = React.useState({'a':1, 'b':0});\n    let dims = context.dimensions[props.params.usedata];\n    // if (props.params.usedata === \"detail\") {\n    //     dims = context.dimensions;\n    // } else if (props.params.usedata === \"deaths\") {\n    //     dims = context.dimensionsD;\n    // }\n    const div = React.useRef(null);\n    const windowSize = useWindowDimensions()\n    React.useEffect(() => {\n        const newChart = props.chartFunction(div.current, dims, props.params, windowSize, chartData, updateChartData);\n\n        newChart.render();\n        updateChart(newChart);\n    }, [props.params, windowSize]);\n\n    let button;\n    let label;\n    const chartGroup = `${props.params.usedata}_${props.params.loc}_${props.params.normalize?\"normalized\":\"base\"}`\n    if (props.reset) {\n        button = <ResetButton chart={chart} group={chartGroup} />;\n        label= <Popup content=\"Pick province(s) to filter results and click Reset to restore defaults\" trigger={<Label circular color='teal'>?</Label>}/>\n    }\n    let header;\n    if (props.title) {\n        header = (\n            <Header as=\"h3\">\n                {props.title}\n                {button}\n                {label}\n            </Header>\n        );\n    }\n\n    return (\n        <Fragment>\n            {header}\n            <div ref={div}></div>\n        </Fragment>\n    );\n};\n","import React from \"react\";\nimport * as dc from \"dc\";\nimport { ChartTemplate } from \"./chartTemplate\";\nimport { colorf, sortpc, population, totalReduce, populationW} from \"../util\";\n\nconst provinceChartFunc = (\n    divRef,\n    dimensions,\n    params,\n    windowSize,\n    chartData,\n    updateChartData\n) => {\n    const chartW0 = 350;\n    const chartH0 = 300;\n    if (chartData.hasOwnProperty(\"chart\")) {\n        const chart = chartData.chart;\n\n        const chartW = (windowSize.width / 1440) * chartW0;\n        const chartH = (windowSize.width / 1440) * chartH0;\n        chart.width(chartW).height(chartH);\n        return chart;\n    } else {\n        let dimension;\n        if (params.normalize) {\n            dimension = dimensions[\"provN\"];\n        } else {\n            dimension = dimensions[\"prov\"];\n        }\n        const group = dimension.group();\n        const colors = colorf();\n        // const provinces = totalReduce(group).all()\n        const provinces = totalReduce(group).top(10)\n        sortpc(provinces, colors);\n        const chartGroup = `${params.usedata}_${params.loc}_${params.normalize?\"normalized\":\"base\"}`\n        const provinceChart = dc.rowChart(divRef, chartGroup);\n        const normalize = params.normalize;\n        const chartW = (windowSize.width / 1440) * chartW0;\n        const chartH = (windowSize.width / 1440) * chartH0;\n        const popData = params.loc===\"Country\"?populationW:population;\n        provinceChart\n            .width(chartW)\n            .height(chartH)\n            .margins({ top: 10, right: 50, bottom: 30, left: 40 })\n            .dimension(dimension)\n            .group(group)\n            .cap(13)\n            .elasticX(true)\n            .othersGrouper(false)\n            // .labelOffsetX(-25)\n            .valueAccessor(x =>{\n                // console.log(x, params);\n                return normalize ? x.value / popData[x.key] : x.value}\n            )\n            .ordinalColors(\n                colors.slice(0, Object.keys(provinces).length).reverse()\n            );\n\n        provinceChart.xAxis().ticks(5);\n\n        updateChartData({ chart: provinceChart });\n        return provinceChart;\n    }\n};\n\nexport const ProvinceChart = props => {\n    return (\n        <ChartTemplate\n            chartFunction={provinceChartFunc}\n            title={props.params.loc + \" totals\"}\n            reset={true}\n            params={props.params}\n        />\n    );\n};\n","import React from \"react\";\nimport * as dc from \"dc\";\nimport { ChartTemplate } from \"./chartTemplate\";\nimport { scaleTime, format } from \"d3\";\nimport moment from \"moment\";\nimport { colorf, sortpc, totalReduce, provinceTotalReduce, accumulateGroup, accumulateGroupTotal } from \"../util\";\n\nconst timeChartFunc = (\n    divRef,\n    dimensions,\n    params,\n    windowSize,\n    chartData,\n    updateChartData\n) => {\n\n    const chartH0 = 350;\n    const chartW0 = 475;\n    if (chartData.hasOwnProperty(\"chart\")) {\n        const chart = chartData.chart;\n\n        const chartW = (windowSize.width / 1440) * chartW0;\n        const chartH = (windowSize.width / 1440) * chartH0;\n\n        chart.width(chartW).height(chartH);\n        return chart;\n    } else {\n        // let dimension;\n        // let pgroup;\n        // let group;\n        const dimension = dimensions[\"date\"];\n        const pgroup = dimensions[\"prov\"].group();\n        const group = dimension.group();\n        const stack = params.stacked;\n        let chartGroup = group;\n        const colors = colorf();\n        if (stack) {\n            const pCounts = provinceTotalReduce(group);\n            const ag = accumulateGroup(pCounts);\n            chartGroup = ag;\n        } else {\n            const tCount = totalReduce(group);\n            chartGroup = accumulateGroupTotal(tCount);\n        }\n        // const provinces = totalReduce(pgroup).all();\n        const provinces = totalReduce(pgroup).top(13);\n        //sort provinces and colors together\n        sortpc(provinces, colors);\n        const smallestProvince = provinces[0].key;\n        const sel = i => {\n            return d => d.value[i] || 0;\n        };\n\n        const dcchartGroup = `${params.usedata}_${params.loc}_${params.normalize?\"normalized\":\"base\"}`\n        const timeChart = dc.lineChart(divRef, dcchartGroup);\n\n        if (stack) {\n            timeChart\n                .dimension(dimension)\n                .group(chartGroup, smallestProvince, sel(smallestProvince))//.top(10);\n        } else {\n            timeChart.dimension(dimension).group(chartGroup)//.top(10);\n        }\n\n        const chartW = (windowSize.width / 1440) * chartW0;\n        const chartH = (windowSize.width / 1440) * chartH0;\n\n        timeChart\n            .renderArea(true)\n            .elasticY(true)\n            .width(chartW)\n            .height(chartH)\n            .brushOn(false)\n            .clipPadding(10)\n            .margins({ left: 40, top: 10, right: 10, bottom: 20 })\n            // .renderDataPoints({ radius: 0, fillOpacity: 1 })\n            .xyTipsOn(true)\n            // .title(x=>{return `${x.key.format(\"d-MMM\")}: ${x.value}`})\n            // .title(x=>{console.log(x.value); return parseInt(x.value)})\n            .x(\n                scaleTime().domain([\n                    new Date(2020, 2, 1),\n                    moment().add(1, \"day\")\n                ])\n            )\n            .ordinalColors(colors)\n            .xAxis()\n            .ticks(8)\n            .tickFormat(v => moment(v).format(\"DD/MM\"));\n\n        timeChart.yAxis().tickFormat(v=>format(\".2s\")(v));\n        if (stack) {\n            for (const p of provinces.slice(1)) {\n                const pk = p.key;\n                timeChart.stack(chartGroup, pk, sel(pk));\n            }\n        }\n        updateChartData({ 'chart': timeChart });\n        return timeChart;\n    }\n};\n\nexport const TimeChart = props => {\n    return (\n        <ChartTemplate\n            chartFunction={timeChartFunc}\n            title=\"Cumulative\"\n            params={props.params}\n        />\n    );\n};\n","import React from \"react\";\nimport * as dc from \"dc\";\nimport { ChartTemplate } from \"./chartTemplate\";\nimport { scaleTime } from \"d3\";\nimport moment from \"moment\";\nimport { colorf, sortpc, population, populationW, totalReduce, provinceTotalReduce, accumulateGroup } from \"../util\";\n\nconst chartFunc = (divRef, dimensions, params, windowSize, chartData, updateChartData) => {\n    const chartH0 = 350;\n    const chartW0 = 475;\n\n    if (chartData.hasOwnProperty(\"chart\")) {\n        const chart = chartData.chart;\n\n        const chartW = (windowSize.width / 1440) * chartW0;\n        const chartH = (windowSize.width / 1440) * chartH0;\n\n        chart.width(chartW).height(chartH);\n        return chart;\n    } else {\n\n    const dimension = dimensions[\"date\"];\n    const pgroup = dimensions[\"prov\"].group();\n    const group = dimension.group();\n    // Per location totals for ranking the row chart and assigning colors\n    const provinces = totalReduce(pgroup).top(13); \n    const colors = colorf();\n\n    const pCounts = provinceTotalReduce(group);\n    let chartGroup;\n    if (params.cumulative){\n        const ag = accumulateGroup(pCounts);\n        chartGroup = ag;\n    }\n    else{\n        chartGroup = pCounts;\n    }\n    //sort provinces and colors together\n    sortpc(provinces, colors);\n    // const smallestProvince = provinces[0].key;\n    const sel = i => {\n        return d => d.value[i] || 0;\n    };\n\n    const dcchartGroup = `${params.usedata}_${params.loc}_${params.normalize?\"normalized\":\"base\"}`\n    const timeChart = dc.compositeChart(divRef, dcchartGroup);\n\n    const charts = [];\n\n    provinces.forEach((el, ix) => {\n        const pk = el.key;\n        const color = colors[ix];\n        charts.push(\n            dc\n                .lineChart(timeChart)\n                .dimension(dimension)\n                .group(chartGroup, pk, sel(pk))\n                .colors(color)\n                .title(x=>{return `${x.key.format(\"d-MMM\")}: ${pk} : ${x.value[pk]}`})\n            )\n    });\n    \n    const    chartW = windowSize.width/1440 * chartW0;\n    const    chartH = windowSize.width/1440 * chartH0;\n    timeChart\n        // .renderArea(true)\n        .elasticY(true)\n        .width(chartW)\n        .height(chartH)\n        .brushOn(false)\n        .clipPadding(10)\n        .margins({ left: 50, top: 10, right: 10, bottom: 20 })\n        .shareTitle(false)\n        .x(scaleTime().domain([new Date(2020, 2, 1), moment().add(1, \"day\")]))\n        .compose(charts);\n\n    timeChart\n        .xAxis()\n        .ticks(5)\n        .tickFormat(v => moment(v).format(\"DD/MM\"));\n\n    updateChartData({ 'chart': timeChart });\n    return timeChart;\n}\n};\n\nexport const LineChart = props => {\n    return (\n        <ChartTemplate \n        chartFunction={chartFunc} \n        title={props.params.cumulative?\"Cumulative\":\"Daily\"}\n        params={props.params} />\n    );\n};\n","import React from \"react\";\nimport * as dc from \"dc\";\nimport { ChartTemplate } from \"./chartTemplate\";\nimport { colorf, sortpc, totalReduce, provinceTotalReduce } from \"../util\";\n\nconst statNumberFunc = (divRef, dimensions, params) => {\n    const dimension = dimensions[\"date\"];\n    let group;\n    let getValue;\n    if (params.total) {\n        group = dimension.groupAll().reduceSum(x=>x.Total);\n        getValue = x => x;\n    } else {\n        group = totalReduce(dimension.group());\n        getValue = x => x.value;\n    }\n    const dcchartGroup = `${params.usedata}_${params.loc}_${params.normalize?\"normalized\":\"base\"}`\n    const quarterChart = dc.numberDisplay(divRef, dcchartGroup);\n    quarterChart\n        .valueAccessor(getValue)\n        .ordering(x => x.key)\n        .group(group);\n    return quarterChart;\n};\n\nexport const StatNumber = props => {\n    return (\n        <ChartTemplate\n            chartFunction={statNumberFunc}\n            title=\"\"\n            params={props.params}\n        />\n    );\n};\n","import React from \"react\";\nimport * as dc from \"dc\";\nimport { ChartTemplate } from \"./chartTemplate\";\nimport { scaleTime, format } from \"d3\";\nimport moment from \"moment\";\nimport { colorf, sortpc, totalReduce, provinceTotalReduce } from \"../util\";\n\nconst dailyTimeChartFunc = (\n    divRef,\n    dimensions,\n    params,\n    windowSize,\n    chartData,\n    updateChartData\n) => {\n    const chartH0 = 350;\n    const chartW0 = 475;\n\n    if (chartData.hasOwnProperty(\"chart\")) {\n        const chart = chartData.chart;\n\n        const chartW = (windowSize.width / 1440) * chartW0;\n        const chartH = (windowSize.width / 1440) * chartH0;\n\n        chart.width(chartW).height(chartH);\n        return chart;\n    } else {\n        const dimension = dimensions[\"date\"];\n        const pdim = dimensions[\"prov\"];\n        const group = dimension.group();\n        const stack = params.stacked;\n        let chartGroup = group;\n        const provincesG = totalReduce(pdim.group());\n        if (stack) {\n            const pCounts = provinceTotalReduce(group);\n            chartGroup = pCounts;\n        }\n        else{\n            chartGroup = totalReduce(group);\n        }\n        const sel = i => {\n            return d => d.value[i] || 0;\n        };\n\n        const colors = colorf();\n        // const provinces = provincesG.all();\n        const provinces = provincesG.top(13);\n        sortpc(provinces, colors);\n\n        const dcchartGroup = `${params.usedata}_${params.loc}_${params.normalize?\"normalized\":\"base\"}`\n        const timeChart = dc.lineChart(divRef, dcchartGroup);\n\n        const smallestProvince = provinces[0].key;\n        if (stack) {\n            timeChart\n                .dimension(dimension)\n                .group(chartGroup, smallestProvince, sel(smallestProvince));\n        } else {\n            timeChart.dimension(dimension).group(chartGroup);\n        }\n\n        const chartW = (windowSize.width / 1440) * chartW0;\n        const chartH = (windowSize.width / 1440) * chartH0;\n        timeChart\n            .renderArea(true)\n            .elasticY(true)\n            .width(chartW)\n            .height(chartH)\n            .brushOn(false)\n            .clipPadding(10)\n            .margins({ left: 40, top: 10, right: 10, bottom: 20 })\n            // .renderDataPoints({ radius: 2, fillOpacity: 1 })\n            .ordinalColors(colors)\n            .x(\n                scaleTime().domain([\n                    new Date(2020, 2, 1),\n                    moment().add(1, \"day\")\n                ])\n            )\n            .xAxis()\n            .ticks(5)\n            .tickFormat(v => moment(v).format(\"DD/MM\"));\n\n        timeChart.yAxis().tickFormat(v=>format(\".2s\")(v));\n        if (stack) {\n            for (const p of provinces.slice(1)) {\n                const pk = p.key;\n                timeChart.stack(chartGroup, pk, sel(pk));\n            }\n        }\n\n        updateChartData({ 'chart': timeChart });\n        return timeChart;\n    }\n};\n\nexport const DailyTimeChart = props => {\n    return (\n        <ChartTemplate\n            chartFunction={dailyTimeChartFunc}\n            title=\"Daily\"\n            params={props.params}\n        />\n    );\n};\n","import React from \"react\";\nimport * as dc from \"dc\";\nimport { ChartTemplate } from \"./chartTemplate\";\nimport { scaleTime } from \"d3\";\nimport moment from \"moment\";\nimport { colorf, sortpc, population, populationW, totalReduce, provinceTotalReduce } from \"../util\";\n\nconst timeChartFunc = (divRef, dimensions, params, windowSize, chartData, updateChartData) => {\n    const chartH0 = 350;\n    const chartW0 = 475;\n\n    if (chartData.hasOwnProperty(\"chart\")) {\n        const chart = chartData.chart;\n\n        const chartW = (windowSize.width / 1440) * chartW0;\n        const chartH = (windowSize.width / 1440) * chartH0;\n\n        chart.width(chartW).height(chartH);\n        return chart;\n    } else {\n    let dimension;\n    let pdim;\n    dimension = dimensions['dateN'];\n    pdim = dimensions['provN'];\n    const group = dimension.group();\n    // let chartGroup = group;\n    const colors = colorf();\n    const popData = params.loc===\"Country\"?populationW:population;\n    const pCounts = group.reduce(\n        (p, v) => {\n            p[v.Prov] = (p[v.Prov] || 0) + v.Total / popData[v.Prov];\n            return p;\n        },\n        (p, v) => {\n            p[v.Prov] = p[v.Prov] - v.Total / popData[v.Prov];\n            return p;\n        },\n        () => ({})\n    );\n    function accumulate_group(source_group) {\n        return {\n            all: function() {\n                const sa = source_group.all();\n                const cumulate = {};\n                const res = [];\n                for (const el of sa) {\n                    for (let [k, v] of Object.entries(el.value)) {\n                        cumulate[k] = (cumulate[k] || 0) + v;\n                    }\n                    res.push({ key: el.key, value: { ...cumulate } });\n                }\n                return res;\n            }\n        };\n    }\n    const ag = accumulate_group(pCounts);\n    const chartGroup = ag;\n    const provinces = totalReduce(pdim.group()).top(13);\n    sortpc(provinces, colors);\n    const smallestProvince = provinces[0].key;\n    const sel = i => {\n        return d => d.value[i] || 0;\n    };\n\n    const dcchartGroup = `${params.usedata}_${params.loc}_${params.normalize?\"normalized\":\"base\"}`\n    const timeChart = dc.compositeChart(divRef, dcchartGroup);\n\n    const charts = [];\n\n    provinces.forEach((el, ix) => {\n        const pk = el.key;\n        const color = colors[ix];\n        charts.push(\n            dc\n                .lineChart(timeChart)\n                .dimension(dimension)\n                .group(chartGroup, pk, sel(pk))\n                .colors(color)\n            )\n            // .renderDataPoints({ radius: 2, fillOpacity: 1 })\n    });\n    \n    const    chartW = windowSize.width/1440 * chartW0;\n    const    chartH = windowSize.width/1440 * chartH0;\n    timeChart\n        .elasticY(true)\n        .width(chartW)\n        .height(chartH)\n        .brushOn(false)\n        .clipPadding(10)\n        .margins({ left: 50, top: 10, right: 10, bottom: 20 })\n        .x(scaleTime().domain([new Date(2020, 2, 1), moment().add(1, \"day\")]))\n        .compose(charts);\n\n    timeChart\n        .xAxis()\n        .ticks(5)\n        .tickFormat(v => moment(v).format(\"DD/MM\"));\n\n    updateChartData({ 'chart': timeChart });\n    return timeChart;\n}\n};\n\nexport const NormalizedChart = props => {\n    return (\n        <ChartTemplate chartFunction={timeChartFunc} params={props.params} />\n    );\n};\n","import React, { Fragment } from \"react\";\nimport { CXContext } from \"./cxContext\";\nimport moment from \"moment\";\n\nexport const LastDateDisplay = props => {\n    const context = React.useContext(CXContext);\n    // if (props.params.usedata === \"detail\") {\n    //     dimension = context.dimensions['date'];\n    // } else if (props.params.usedata === \"deaths\") {\n    //     dimension = context.dimensionsD['date'];\n    // }\n    const dimension = context.dimensions[props.params.usedata]['date'];\n    // const dimension = cf.dimension(d => d.Date);\n    const group = dimension.group();\n    const vals = group.all();\n    const last = moment.max(vals.map(x => x.key)).format(\"D-MMM\");\n\n    return <Fragment>{last}</Fragment>;\n};\n","import React, {Fragment} from \"react\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nimport { ProvinceChart } from \"./provinceChart\";\nimport { TimeChart } from \"./timeChart\";\nimport { StatNumber } from \"./statNumber\";\nimport { LineChart } from \"./lineChart\";\nimport { DailyTimeChart } from \"./dailyTimeChart\";\nimport { NormalizedChart } from \"./normalizedChart\";\nimport { LastDateDisplay } from \"./textDisplay\";\nimport {\n    Grid,\n    Tab,\n    Segment,\n    Label,\n    Statistic,\n    StatisticValue,\n    StatisticLabel,\n    GridRow,\n    Header,\n    HeaderContent,\n    Icon\n} from \"semantic-ui-react\";\n\nconst LOC = \"Country\";\nexport const WorldDashboard = props => {\n    const panes_cumulative = [\n        {\n            menuItem: \"Stacked\",\n            pane: (\n                <Tab.Pane attached=\"top\" key={1}>\n                    <TimeChart params={{ stacked: true, usedata: \"detailW\" , loc:LOC}} />\n                </Tab.Pane>\n            )\n        },\n        {\n            menuItem: \"Lines\",\n            pane: (\n                <Tab.Pane attached=\"top\" key={2}>\n                    <LineChart params={{ stacked: false, usedata: \"detailW\" ,loc:LOC, cumulative:true  }} />\n                </Tab.Pane>\n            )\n        },\n        {\n            menuItem: \"Total\",\n            pane: (\n                <Tab.Pane attached=\"top\" key={3}>\n                    <TimeChart params={{ stacked: false, usedata: \"detailW\" , loc:LOC}} />\n                </Tab.Pane>\n            )\n        }\n    ];\n    const panes_daily = [\n        {\n            menuItem: \"Stacked\",\n            pane: (\n                <Tab.Pane attached=\"top\" key={4}>\n                    <DailyTimeChart\n                        params={{ stacked: true, usedata: \"detailW\" , loc:LOC}}\n                    />\n                </Tab.Pane>\n            )\n        },\n        {\n            menuItem: \"Lines\",\n            pane: (\n                <Tab.Pane attached=\"top\" key={5}>\n                    <LineChart params={{ stacked: false, usedata: \"detailW\" ,loc:LOC, cumulative:false  }} />\n                </Tab.Pane>\n            )\n        },\n        {\n            menuItem: \"Total\",\n            pane: (\n                <Tab.Pane attached=\"top\" key={6}>\n                    <DailyTimeChart\n                        params={{ stacked: false, usedata: \"detailW\" , loc:LOC}}\n                    />\n                </Tab.Pane>\n            )\n        }\n    ];\n\n    const cases = (\n        <Grid>\n            <Grid.Row columns={16}>\n                <Grid.Column width={4}>\n                    <Grid>\n                        <GridRow centered columns={1}>\n                            <Grid.Column width={6}>\n                                <Statistic centered size=\"small\">\n                                    <StatisticValue>\n                                        <StatNumber\n                                            params={{\n                                                usedata: \"detailW\",\n                                                total: true,\n                                                loc:LOC\n                                            }}\n                                        />\n                                    </StatisticValue>\n                                    <StatisticLabel>Total cases</StatisticLabel>\n                                </Statistic>\n                            </Grid.Column>\n                            <Grid.Column width={6}>\n                                <Statistic size=\"small\">\n                                    <StatisticValue>\n                                        <StatNumber\n                                            params={{\n                                                usedata: \"detailW\",\n                                                total: false,\n                                                // date: true\n                                                loc:LOC\n                                            }}\n                                        />\n                                    </StatisticValue>\n                                    <StatisticLabel>New cases</StatisticLabel>\n                                    <StatisticLabel>\n                                        On{\" \"}\n                                        <LastDateDisplay\n                                            params={{ usedata: \"detailW\" }}\n                                        />\n                                    </StatisticLabel>\n                                </Statistic>\n                            </Grid.Column>\n                        </GridRow>\n\n                        <Grid.Column width={16}>\n                            <Segment>\n                                <ProvinceChart params={{ usedata: \"detailW\", loc:LOC }} />\n                            </Segment>\n                        </Grid.Column>\n                    </Grid>\n                    {/* </Grid> */}\n                </Grid.Column>\n                <Grid.Column width={6}>\n                    <Tab\n                        menu={{ secondary: true, pointing: true }}\n                        panes={panes_cumulative}\n                        renderActiveOnly={false}\n                    />\n                </Grid.Column>\n                <Grid.Column width={6}>\n                    <Tab\n                        menu={{ secondary: true, pointing: true }}\n                        panes={panes_daily}\n                        renderActiveOnly={false}\n                    />\n                    {/* <DailyTimeChart params={{usedata:'detail'}}/> */}\n                </Grid.Column>\n            </Grid.Row>\n            <Grid.Row columns={2}>\n                <Grid.Column>{/* <OriginChart/> */}</Grid.Column>\n            </Grid.Row>\n        </Grid>\n    );\n    const panes_cumulative_d = [\n        {\n            menuItem: \"Stacked\",\n            pane: (\n                <Tab.Pane attached=\"top\" key={11}>\n                    <TimeChart params={{ stacked: true, usedata: \"deathsW\" , loc:LOC}} />\n                </Tab.Pane>\n            )\n        },\n        {\n            menuItem: \"Lines\",\n            pane: (\n                <Tab.Pane attached=\"top\" key={12}>\n                    <LineChart params={{ stacked: false, usedata: \"deathsW\" ,loc:LOC, cumulative:true  }} />\n                </Tab.Pane>\n            )\n        },\n        {\n            menuItem: \"Total\",\n            pane: (\n                <Tab.Pane attached=\"top\" key={13}>\n                    <TimeChart params={{ stacked: false, usedata: \"deathsW\" , loc:LOC}} />\n                </Tab.Pane>\n            )\n        }\n    ];\n    const panes_daily_d = [\n        {\n            menuItem: \"Stacked\",\n            pane: (\n                <Tab.Pane attached=\"top\" key={14}>\n                    <DailyTimeChart\n                        params={{ stacked: true, usedata: \"deathsW\" , loc:LOC}}\n                    />\n                </Tab.Pane>\n            )\n        },\n        {\n            menuItem: \"Lines\",\n            pane: (\n                <Tab.Pane attached=\"top\" key={15}>\n                    <LineChart params={{ stacked: false, usedata: \"deathsW\" ,loc:LOC, cumulative:false  }} />\n                </Tab.Pane>\n            )\n        },\n        {\n            menuItem: \"Total\",\n            pane: (\n                <Tab.Pane attached=\"top\" key={16}>\n                    <DailyTimeChart\n                        params={{ stacked: false, usedata: \"deathsW\" , loc:LOC}}\n                    />\n                </Tab.Pane>\n            )\n        }\n    ];\n    const deaths = (\n        <Grid>\n            <Grid.Row columns={16}>\n                {/* <GenderChart/>\n            <AgeChart/> */}\n                <Grid.Column width={4}>\n                    <Grid>\n                        <GridRow centered columns={3}>\n                            <Grid.Column width={6}>\n                                <Statistic size=\"small\">\n                                    <StatisticValue>\n                                        <StatNumber\n                                            params={{\n                                                usedata: \"deathsW\",\n                                                total: true,\n                                                loc:LOC\n                                            }}\n                                        />\n                                    </StatisticValue>\n                                    <StatisticLabel>\n                                        Total casualties\n                                    </StatisticLabel>\n                                </Statistic>\n                            </Grid.Column>\n                            <Grid.Column width={6}>\n                                <Statistic size=\"small\">\n                                    <StatisticValue>\n                                        <StatNumber\n                                            params={{\n                                                usedata: \"deathsW\",\n                                                total: false,\n                                                // date: true\n                                                loc:LOC\n                                            }}\n                                        />\n                                    </StatisticValue>\n                                    <StatisticLabel>New casualties</StatisticLabel>\n                                    <StatisticLabel>\n                                        On{\" \"}\n                                        <LastDateDisplay\n                                            params={{ usedata: \"deathsW\" }}\n                                        />\n                                    </StatisticLabel>\n                                </Statistic>\n                            </Grid.Column>\n                        </GridRow>\n                        <Grid.Column width={16}>\n                            <Segment>\n                                <ProvinceChart params={{ usedata: \"deathsW\", loc:LOC }} />\n                            </Segment>\n                        </Grid.Column>\n                    </Grid>\n                </Grid.Column>\n                <Grid.Column width={6}>\n                    <Tab\n                        menu={{ secondary: true, pointing: true }}\n                        panes={panes_cumulative_d}\n                        renderActiveOnly={false}\n                    />\n                </Grid.Column>\n                <Grid.Column width={6}>\n                    <Tab\n                        menu={{ secondary: true, pointing: true }}\n                        panes={panes_daily_d}\n                        renderActiveOnly={false}\n                    />\n                    {/* <DailyTimeChart params={{usedata:'detail'}}/> */}\n                </Grid.Column>\n            </Grid.Row>\n            <Grid.Row columns={2}>\n                <Grid.Column>{/* <OriginChart/> */}</Grid.Column>\n            </Grid.Row>\n        </Grid>\n    );\n\n    const normalized = (\n        <Grid>\n            <GridRow centered>\n                {/* <Grid.Column width={10}> */}\n                <Header as=\"h2\">CASES PER 1M</Header>\n                {/* </Grid.Column> */}\n            </GridRow>\n            <Grid.Row centered columns={5}>\n                <Grid.Column width={4}>\n                    <Segment>\n                        <ProvinceChart\n                            params={{ usedata: \"detailW\", normalize: true, loc:LOC }}\n                        />\n                    </Segment>\n                </Grid.Column>\n                <Grid.Column width={6}>\n                    <Segment>\n                        <NormalizedChart\n                            params={{ usedata: \"detailW\", normalize: true, loc:LOC }}\n                        />\n                    </Segment>\n                </Grid.Column>\n            </Grid.Row>\n        </Grid>\n    );\n    const normalizedd = (\n        <Grid>\n            <GridRow centered>\n                {/* <Grid.Column width={10}> */}\n                <Header as=\"h2\">CASUALTIES PER 1M</Header>\n                {/* </Grid.Column> */}\n            </GridRow>\n            <Grid.Row centered columns={5}>\n                <Grid.Column width={4}>\n                    <Segment>\n                        <ProvinceChart\n                            params={{ usedata: \"deathsW\", normalize: true , loc:LOC}}\n                        />\n                    </Segment>\n                </Grid.Column>\n                <Grid.Column width={6}>\n                    <Segment>\n                        <NormalizedChart\n                            params={{ usedata: \"deathsW\", normalize: true, loc:LOC}}\n                        />\n                    </Segment>\n                </Grid.Column>\n            </Grid.Row>\n        </Grid>\n    );\n    const panes = [\n        {\n            menuItem: \"Positive cases\",\n            pane: (\n                <Tab.Pane attached=\"top\" key={1} className=\"plotPane\">\n                    {cases}\n                </Tab.Pane>\n            )\n        },\n        {\n            menuItem: \"Casualties\",\n            pane: (\n                <Tab.Pane attached=\"top\" key={2} className=\"plotPane\">\n                    {deaths}\n                </Tab.Pane>\n            )\n        },\n        {\n            menuItem: \"Cases per million\",\n            pane: (\n                <Tab.Pane attached=\"top\" key={3} className=\"plotPane\">\n                    {normalized}\n                </Tab.Pane>\n            )\n        },\n        {\n            menuItem: \"Casualties per million\",\n            pane: (\n                <Tab.Pane attached=\"top\" key={4} className=\"plotPane\">\n                    {normalizedd}\n                </Tab.Pane>\n            )\n        }\n    ];\n    return (\n        <Fragment>\n                <Tab\n                    menu={{ secondary: true, pointing: true, borderless:true, attached:false, tabular:false }}\n                    panes={panes}\n                    renderActiveOnly={false}\n                />\n        </Fragment>\n    );\n};\n","import React from \"react\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nimport DataContext from \"./cxContext\";\nimport {CanadaDashboard} from \"./canadaDashboard.js\"\nimport {WorldDashboard} from \"./worldDashboard.js\"\nimport {\n    Tab,\n    Segment,\n    Header,\n    Icon\n} from \"semantic-ui-react\";\n\nexport const Dashboard = props => {\n    const panes = [\n        // {\n        //     menuItem: {content:\"Canada\", key:\"canada\", icon:'tree'},\n        //     pane: (\n        //         <Tab.Pane attached=\"top\" key={1}>\n        //             <CanadaDashboard/>\n        //         </Tab.Pane>\n        //     )\n        // },\n        {\n            menuItem: {content:\"World\", key:\"world\", icon:'globe'},\n            pane: (\n                <Tab.Pane attached=\"top\" key={2}>\n                    <WorldDashboard/>\n                </Tab.Pane>\n            )\n        }\n    ];\n    return (\n        <div>\n            <DataContext>\n                <Segment color=\"black\" inverted>\n                    <Header color=\"yellow\" id=\"title\" textAlign=\"center\">\n                        <Icon name=\"heartbeat\" />\n                        Canada+World Covid-19 data visualization\n                    </Header>\n                </Segment>\n                <Segment>\n                    <Tab\n                        menu={{ secondary: true, pointing: false }}\n                        panes={panes}\n                        renderActiveOnly={false}\n                    />\n                </Segment>\n                <Segment color=\"orange\">\n                    Data sources:{\" \"}\n                    <a href=\"https://virihealth.com/\" target=\"_blank\">ViriHealth</a> \n                    {\" \"} and\n                    <a href=\"https://github.com/CSSEGISandData/COVID-19\" target=\"_blank\"> John Hopkins University CSSE</a>\n                </Segment>\n            </DataContext>\n        </div>\n    );\n};\n","import React from 'react';\nimport './App.css';\n// import Plot from \"./components/plot\"\nimport { Dashboard } from \"./components/dashboard\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Dashboard/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
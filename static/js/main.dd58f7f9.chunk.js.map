{"version":3,"sources":["components/cxContext.js","util.js","components/chartTemplate.js","components/provinceChart.js","components/timeChart.js","components/statNumber.js","components/dailyTimeChart.js","components/normalizedChart.js","components/textDisplay.js","components/dashboard.js","App.js","serviceWorker.js","index.js"],"names":["CXContext","React","createContext","DataContext","state","detailData","deathData","loading","hasCF","this","urlBase","url","url2g","setState","processDeathData","data","console","log","forEach","d","Date","moment","filter","x","Prov","cfd","crossfilter","clonedData","JSON","parse","stringify","cfdn","p1","csv","then","cf","cfn","catch","error","backupUrlBase","p2","Promise","all","Provider","value","ref","parent","props","children","Component","colorf","map","rgb","darker","formatHex","sortpc","provinces","colors","merged","i","length","push","a1","a2","sort","y","population","ON","QC","BC","AB","SK","NL","NS","MB","NB","PE","YT","NT","NU","getWindowDimensions","window","width","innerWidth","height","innerHeight","ResetButton","style","css","cursor","Label","onClick","chart","filterAll","dc","ChartTemplate","context","useContext","useState","updateChart","params","usedata","normalize","button","label","header","div","useRef","windowSize","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useWindowDimensions","newChart","chartFunction","current","render","reset","Popup","content","trigger","circular","color","title","Header","as","provinceChartFunc","divRef","dimension","group","provinceChart","chartH","chartW","margins","top","right","bottom","left","elasticX","labelOffsetX","valueAccessor","key","ordinalColors","slice","Object","keys","reverse","xAxis","ticks","ProvinceChart","timeChartFunc","stack","stacked","chartGroup","accumulate_group","source_group","sa","cumulate","res","el","entries","k","v","reduce","p","smallestProvince","sel","timeChart","renderArea","elasticY","brushOn","clipPadding","renderDataPoints","radius","fillOpacity","xyTipsOn","scaleTime","domain","add","tickFormat","format","pk","TimeChart","statNumberFunc","getValue","total","groupAll","quarterChart","ordering","StatNumber","dailyTimeChartFunc","DailyTimeChart","pCounts","ag","charts","ix","compose","NormalizedChart","LastDateDisplay","vals","last","max","Dashboard","panes_cumulative","menuItem","pane","Tab","Pane","attached","panes_daily","cases","Grid","Row","columns","Column","GridRow","centered","Statistic","size","StatisticValue","StatisticLabel","date","Segment","menu","secondary","pointing","panes","renderActiveOnly","panes_cumulative_d","panes_daily_d","deaths","normalized","normalizedd","inverted","id","textAlign","Icon","name","href","App","className","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"yVAKaA,EAAYC,IAAMC,cAAc,aAExBC,E,4MACjBC,MAAQ,CACJC,WAAY,KACZC,UAAW,KACXC,SAAS,EACTC,OAAO,G,kEAEU,IAAD,OAChB,IAAIC,KAAKL,MAAMI,QAGXC,KAAKL,MAAMG,QAAf,CAGA,IACMG,EACF,iHACEC,EAAMD,EAAU,eAChBE,EAAQF,EAAU,gBAGxBD,KAAKI,SAAS,CAAEN,SAAS,IAEzB,IAcMO,EAAmB,SAAAC,GACrBC,QAAQC,IAAIF,GACZA,EAAKG,SAAQ,SAAAC,GACTA,EAAEC,KAAOC,IAAOF,EAAE,eAAiB,QA1BxB,iBA4BfJ,EAAOA,EAAKO,QAAO,SAAAC,GAAC,MAAe,OAAXA,EAAEC,QAC1B,EAAKC,IAAMC,EAAYX,GACvB,IAAMY,EAAaC,KAAKC,MAAMD,KAAKE,UAAUf,IAK7C,OAJAY,EAAWT,SAAQ,SAAAK,GACfA,EAAEH,KAAOC,IAAOE,EAAEH,SAEtB,EAAKW,KAAOL,EAAYC,GACjBZ,GAOLiB,EAAKC,YAAItB,GACVuB,MAlCqB,SAAAnB,GACtBA,EAAKG,SAAQ,SAAAC,GACTA,EAAEC,KAAOC,IAAOF,EAAEC,KAAO,QAXd,iBAafL,EAAOA,EAAKO,QAAO,SAAAC,GAAC,MAAe,OAAXA,EAAEC,QAC1B,EAAKW,GAAKT,EAAYX,GACtB,IAAMY,EAAaC,KAAKC,MAAMD,KAAKE,UAAUf,IAK7C,OAJAY,EAAWT,SAAQ,SAAAK,GACfA,EAAEH,KAAOC,IAAOE,EAAEH,SAEtB,EAAKgB,IAAMV,EAAYC,GAChBZ,KAwBNsB,OAAM,SAAAC,GAEH,OADAtB,QAAQC,IAAI,kBAAmBqB,GACxBL,YAPGM,kKAQLL,KAAKpB,GACLuB,OAAM,SAAAC,GACHtB,QAAQC,IAAI,gBAAiBqB,SAIvCE,EAAKP,YAAIrB,GACVsB,KAAKpB,GACLuB,OAAM,SAAAC,GAEH,OADAtB,QAAQC,IAAI,mBAAoBqB,GACzBL,YAjBIM,mKAkBNL,KAAKpB,GACLuB,OAAM,SAAAC,GACHtB,QAAQC,IAAI,gBAAiBqB,SAI7CG,QAAQC,IAAI,CAACV,EAAIQ,IAAKN,MAAK,SAAAX,GACvBP,QAAQC,IAAI,WAAYM,GACxB,EAAKV,SAAS,CACVN,SAAS,EACTC,OAAO,EACPH,WAAYkB,EAAE,GACdjB,UAAWiB,EAAE,W,+BAKrB,OAAKd,KAAKL,MAAMI,MAIZ,kBAACR,EAAU2C,SAAX,CACIC,MAAO,CACHT,GAAI1B,KAAK0B,GACTV,IAAKhB,KAAKgB,IACVW,IAAK3B,KAAK2B,IACVL,KAAMtB,KAAKsB,OAGf,yBAAKc,IAAKpC,KAAKqC,QAASrC,KAAKsC,MAAMC,WAXhC,S,GA1FsBC,a,4CCJ5BC,EAAS,WAiBlB,MAfa,CACT,CAAC,IAAK,IAAK,IACX,CAAC,IAAK,EAAG,IACT,CAAC,EAAG,IAAK,KACT,CAAC,EAAG,IAAK,GACT,CAAC,EAAG,IAAK,KACT,CAAC,IAAK,GAAI,KACV,CAAC,IAAK,GAAI,GACV,CAAC,IAAK,IAAK,KACX,CAAC,GAAI,GAAI,KACT,CAAC,EAAG,IAAK,KACT,CAAC,IAAK,IAAK,GACX,CAAC,EAAG,IAAK,KACT,CAAC,IAAK,IAAK,MAEHC,KAAI,SAAA5B,GAAC,OACb6B,YAAI7B,EAAE,GAAIA,EAAE,GAAIA,EAAE,IACb8B,SACAC,gBAIAC,EAAS,SAACC,EAAWC,GAE9B,IADA,IAAMC,EAAS,GACNC,EAAI,EAAGA,EAAIH,EAAUI,OAAQD,IAClCD,EAAOG,KAAK,CAAEC,GAAIN,EAAUG,GAAII,GAAIN,EAAOE,KAE/CD,EAAOM,MAAK,SAACzC,EAAG0C,GAAJ,OAAU1C,EAAEuC,GAAGlB,MAAQqB,EAAEH,GAAGlB,SACxC,IAAK,IAAIe,EAAI,EAAGA,EAAID,EAAOE,OAAQD,IAC/BH,EAAUG,GAAKD,EAAOC,GAAGG,GACzBL,EAAOE,GAAKD,EAAOC,GAAGI,IAKjBG,EAAa,CACtBC,GAAI,MACJC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,GAAI,IACJC,GAAI,IACJC,GAAI,KACJC,GAAI,IACJC,GAAI,IACJC,GAAI,KACJC,GAAI,KACJC,GAAI,MAIR,SAASC,IAAuB,IAAD,EACsBC,OACnD,MAAO,CACLC,MAH2B,EACrBC,WAGNC,OAJ2B,EACFC,aCnD7B,IAAMC,EAAc,SAAAvC,GAChB,IAAMwC,EAAQC,cAAI,CACdC,OAAQ,YAEZ,OACI,kBAACC,EAAA,EAAD,iBACQH,EADR,CAEII,QAAS,WACL5C,EAAM6C,MAAMC,YACZC,iBAJR,UAWKC,EAAgB,SAAAhD,GACzB,IAEIZ,EAFE6D,EAAU/F,IAAMgG,WAAWjG,GADC,EAELC,IAAMiG,SAAS,MAFV,mBAE3BN,EAF2B,KAEpBO,EAFoB,KAIL,WAAzBpD,EAAMqD,OAAOC,SACblE,EAAK6D,EAAQ7D,GACTY,EAAMqD,OAAOE,YACbnE,EAAK6D,EAAQ5D,MAEe,WAAzBW,EAAMqD,OAAOC,UACpBlE,EAAK6D,EAAQvE,IACTsB,EAAMqD,OAAOE,YACbnE,EAAK6D,EAAQjE,OAGrB,IASIwE,EACAC,EAKAC,EAfEC,EAAMzG,IAAM0G,OAAO,MACnBC,ED0BH,WAAgC,IAAD,EACYV,mBAASlB,KADrB,mBAC7B6B,EAD6B,KACXC,EADW,KAYpC,OATAC,qBAAU,WACR,SAASC,IACPF,EAAoB9B,KAItB,OADAC,OAAOgC,iBAAiB,SAAUD,GAC3B,kBAAM/B,OAAOiC,oBAAoB,SAAUF,MACjD,IAEIH,ECtCcM,GAyBnB,OAxBAlH,IAAM8G,WAAU,WACZ,IAAMK,EAAWrE,EAAMsE,cAAcX,EAAIY,QAASnF,EAAIY,EAAMqD,OAAQQ,GAEpEQ,EAASG,SACTpB,EAAYiB,KACb,CAACrE,EAAMqD,SAINrD,EAAMyE,QACNjB,EAAS,kBAAC,EAAD,CAAaX,MAAOA,IAC7BY,EAAO,kBAACiB,EAAA,EAAD,CAAOC,QAAQ,yEAAyEC,QAAS,kBAACjC,EAAA,EAAD,CAAOkC,UAAQ,EAACC,MAAM,QAAtB,QAGxG9E,EAAM+E,QACNrB,EACI,kBAACsB,EAAA,EAAD,CAAQC,GAAG,MACNjF,EAAM+E,MACNvB,EACAC,IAMT,kBAAC,WAAD,KACKC,EACD,yBAAK5D,IAAK6D,MC9DhBuB,EAAoB,SAACC,EAAQ/F,EAAIiE,EAAQQ,GAC3C,IAAMuB,EAAYhG,EAAGgG,WAAU,SAAAhH,GAAC,OAAIA,EAAEK,QAChC4G,EAAQD,EAAUC,QAElB3E,EAASP,IACTM,EAAY4E,EAAM1F,MACxBa,EAAOC,EAAWC,GAClB,IAAM4E,EAAgBvC,WAAYoC,GAC5B5B,EAAYF,EAAOE,UACrBgC,EAAS,IACTC,EAAS,IAoBb,OAlBG3B,EAAW1B,MAAM,OAChBqD,EAAS3B,EAAW1B,MAAM,KAAOqD,EACjCD,EAAS1B,EAAW1B,MAAM,KAAOoD,GAErCD,EACKnD,MAAMqD,GACNnD,OAAOkD,GACPE,QAAQ,CAAEC,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,KAChDT,UAAUA,GACVC,MAAMA,GACNS,UAAS,GACTC,cAAc,IACdC,eAAc,SAAAxH,GAAC,OAAK+E,EAAY/E,EAAEqB,MAAQsB,EAAW3C,EAAEyH,KAAOzH,EAAEqB,SAChEqG,cACGxF,EAAOyF,MAAM,EAAGC,OAAOC,KAAK5F,GAAWI,QAAQyF,WAGvDhB,EAAciB,QAAQC,MAAM,GACrBlB,GAGEmB,EAAgB,SAAAzG,GACzB,OACI,kBAAC,EAAD,CACIsE,cAAeY,EACfH,MAAM,kBACNN,OAAO,EACPpB,OAAQrD,EAAMqD,U,uBCrCpBqD,EAAgB,SAACvB,EAAQ/F,EAAIiE,EAAQQ,GACvC,IAAMuB,EAAYhG,EAAGgG,WAAU,SAAAhH,GAAC,OAAIA,EAAEC,QAChCgH,EAAQD,EAAUC,QAClBsB,EAAQtD,EAAOuD,QACjBC,EAAaxB,EACX3E,EAASP,IACf,GAAIwG,EAAO,CAYP,SAASG,EAAiBC,GACtB,MAAO,CACHpH,IAAK,WACD,IADY,EACNqH,EAAKD,EAAapH,MAClBsH,EAAW,GACXC,EAAM,GAHA,cAIKF,GAJL,IAIZ,2BAAqB,CACjB,IADkB,IAAXG,EAAU,QACjB,MAAmBf,OAAOgB,QAAQD,EAAGtH,OAArC,eAA6C,CAAC,IAAD,sBAAnCwH,EAAmC,KAAhCC,EAAgC,KACzCL,EAASI,IAAMJ,EAASI,IAAM,GAAKC,EAEvCJ,EAAIpG,KAAK,CAAEmF,IAAKkB,EAAGlB,IAAKpG,MAAM,eAAMoH,MAR5B,8BAUZ,OAAOC,IAKnBL,EADWC,EA3BKzB,EAAMkC,QAClB,SAACC,EAAGF,GAEA,OADAE,EAAEF,EAAE7I,OAAS+I,EAAEF,EAAE7I,OAAS,GAAK,EACxB+I,KAEX,SAACA,EAAGF,GAEA,OADAE,EAAEF,EAAE7I,MAAQ+I,EAAEF,EAAE7I,MAAQ,EACjB+I,KAEX,iBAAO,WAoBR,CACH,SAASV,EAAiBC,GACtB,MAAO,CACHpH,IAAK,WACD,IADY,EACNqH,EAAKD,EAAapH,MACpBsH,EAAW,EACTC,EAAM,GAHA,cAIKF,GAJL,IAIZ,2BAAqB,CAAC,IAAXG,EAAU,QACjBF,GAAYE,EAAGtH,MACfqH,EAAIpG,KAAK,CAAEmF,IAAKkB,EAAGlB,IAAKpG,MAAOoH,KANvB,8BAQZ,OAAOC,IAInBL,EAAaC,EAAiBzB,GAElC,IACM5E,EADOrB,EAAGgG,WAAU,SAAAhH,GAAC,OAAIA,EAAEK,QACV4G,QAAQ1F,MAE/Ba,EAAOC,EAAWC,GAClB,IAAM+G,EAAmBhH,EAAU,GAAGwF,IAChCyB,EAAM,SAAA9G,GACR,OAAO,SAAAxC,GAAC,OAAIA,EAAEyB,MAAMe,IAAM,IAGxB+G,EAAY5E,YAAaoC,GAE3BwB,EACAgB,EACKvC,UAAUA,GACVC,MAAMwB,EAAYY,EAAkBC,EAAID,IAE7CE,EAAUvC,UAAUA,GAAWC,MAAMwB,GAEzC,IAAItB,EAAS,IACTC,EAAS,IAuBb,GArBG3B,EAAW1B,MAAM,OAChBqD,EAAS3B,EAAW1B,MAAM,KAAOqD,EACjCD,EAAS1B,EAAW1B,MAAM,KAAOoD,GAGrCoC,EACKC,YAAW,GACXC,UAAS,GACT1F,MAAMqD,GACNnD,OAAOkD,GACPuC,SAAQ,GACRC,YAAY,IACZtC,QAAQ,CAAEI,KAAM,GAAIH,IAAK,GAAIC,MAAO,GAAIC,OAAQ,KAChDoC,iBAAiB,CAAEC,OAAQ,EAAGC,YAAa,IAC3CC,UAAS,GACT3J,EAAE4J,sBAAYC,OAAO,CAAC,IAAIhK,KAAK,KAAM,EAAG,GAAIC,MAASgK,IAAI,EAAG,UAC5DpC,cAAcxF,GACd6F,QACAC,MAAM,GACN+B,YAAW,SAAAjB,GAAC,OAAIhJ,IAAOgJ,GAAGkB,OAAO,YAElC7B,EAAO,CAAC,IAAD,gBACSlG,EAAU0F,MAAM,IADzB,IACP,2BAAoC,CAAC,IAC3BsC,EAD0B,QACnBxC,IACb0B,EAAUhB,MAAME,EAAY4B,EAAIf,EAAIe,KAHjC,+BAOX,OAAOd,GAGEe,EAAY,SAAA1I,GACrB,OACI,kBAAC,EAAD,CACIsE,cAAeoC,EACf3B,MAAM,aACN1B,OAAQrD,EAAMqD,UCjHpBsF,EAAiB,SAACxD,EAAQ/F,EAAIiE,GAChC,IACIgC,EACAuD,EAFExD,EAAYhG,EAAGgG,WAAU,SAAAhH,GAAC,OAAIA,EAAEC,QAGnCgF,EAAOwF,OACNxD,EAAQD,EAAU0D,WAClBF,EAAW,SAAApK,GAAC,OAAEA,KAGd6G,EAAQD,EAAUC,QAClBuD,EAAW,SAAApK,GAAC,OAAEA,EAAEqB,QAEpB,IAAMkJ,EAAehG,gBAAiBoC,GAKtC,OAJA4D,EACC/C,cAAc4C,GACdI,UAAS,SAAAxK,GAAC,OAAEA,EAAEyH,OACdZ,MAAMA,GACA0D,GAGEE,EAAa,SAAAjJ,GACtB,OAAO,kBAAC,EAAD,CAAesE,cAAeqE,EAAgB5D,MAAM,GAAG1B,OAAQrD,EAAMqD,UClB1E6F,EAAqB,SAAC/D,EAAQ/F,EAAIiE,EAAQQ,GAC5C,IAAMuB,EAAYhG,EAAGgG,WAAU,SAAAhH,GAAC,OAAIA,EAAEC,QAChCgH,EAAQD,EAAUC,QAClBsB,EAAQtD,EAAOuD,QACjBC,EAAaxB,EACbsB,IAYAE,EAXgBxB,EAAMkC,QAClB,SAACC,EAAGF,GAEA,OADAE,EAAEF,EAAE7I,OAAS+I,EAAEF,EAAE7I,OAAS,GAAK,EACxB+I,KAEX,SAACA,EAAGF,GAEA,OADAE,EAAEF,EAAE7I,OAAS+I,EAAEF,EAAE7I,OAAS,GAAK,EACxB+I,KAEX,iBAAO,OAIf,IACM/G,EADOrB,EAAGgG,WAAU,SAAAhH,GAAC,OAAIA,EAAEK,QACV4G,QAAQ1F,MACzB+H,EAAM,SAAA9G,GACR,OAAO,SAAAxC,GAAC,OAAIA,EAAEyB,MAAMe,IAAM,IAGxBF,EAASP,IACfK,EAAOC,EAAWC,GAElB,IAAMiH,EAAY5E,YAAaoC,GAEzBsC,EAAmBhH,EAAU,GAAGwF,IAClCU,EACAgB,EACKvC,UAAUA,GACVC,MAAMwB,EAAYY,EAAkBC,EAAID,IAE7CE,EAAUvC,UAAUA,GAAWC,MAAMwB,GAEzC,IAAItB,EAAS,IACTC,EAAS,IAqBb,GAnBG3B,EAAW1B,MAAM,OAChBqD,EAAS3B,EAAW1B,MAAM,KAAOqD,EACjCD,EAAS1B,EAAW1B,MAAM,KAAOoD,GAErCoC,EACKC,YAAW,GACXC,UAAS,GACT1F,MAAMqD,GACNnD,OAAOkD,GACPuC,SAAQ,GACRC,YAAY,IACZtC,QAAQ,CAAEI,KAAM,GAAIH,IAAK,GAAIC,MAAO,GAAIC,OAAQ,KAChDoC,iBAAiB,CAAEC,OAAQ,EAAGC,YAAa,IAC3ChC,cAAcxF,GACdlC,EAAE4J,sBAAYC,OAAO,CAAC,IAAIhK,KAAK,KAAM,EAAG,GAAIC,MAASgK,IAAI,EAAG,UAC5D/B,QACAC,MAAM,GACN+B,YAAW,SAAAjB,GAAC,OAAIhJ,IAAOgJ,GAAGkB,OAAO,YAElC7B,EAAO,CAAC,IAAD,gBACSlG,EAAU0F,MAAM,IADzB,IACP,2BAAoC,CAAC,IAC3BsC,EAD0B,QACnBxC,IACb0B,EAAUhB,MAAME,EAAY4B,EAAIf,EAAIe,KAHjC,+BAOX,OAAOd,GAGEwB,EAAiB,SAAAnJ,GAC1B,OACI,kBAAC,EAAD,CACIsE,cAAe4E,EACfnE,MAAM,QACN1B,OAAQrD,EAAMqD,UC3EpBqD,EAAgB,SAACvB,EAAQ/F,EAAIiE,EAAQQ,GACvC,IAEIgD,EAFEzB,EAAYhG,EAAGgG,WAAU,SAAAhH,GAAC,OAAIA,EAAEC,QAChCgH,EAAQD,EAAUC,QAElB3E,EAASP,IACTiJ,EAAU/D,EAAMkC,QAClB,SAACC,EAAGF,GAEA,OADAE,EAAEF,EAAE7I,OAAS+I,EAAEF,EAAE7I,OAAS,GAAK,EAAI0C,EAAWmG,EAAE7I,MACzC+I,KAEX,SAACA,EAAGF,GAEA,OADAE,EAAEF,EAAE7I,MAAQ+I,EAAEF,EAAE7I,MAAQ,EAAI0C,EAAWmG,EAAE7I,MAClC+I,KAEX,iBAAO,MAkBX,IAhB0BT,EAgBpBsC,GAhBoBtC,EAgBEqC,EAfjB,CACHzJ,IAAK,WACD,IADY,EACNqH,EAAKD,EAAapH,MAClBsH,EAAW,GACXC,EAAM,GAHA,cAIKF,GAJL,IAIZ,2BAAqB,CACjB,IADkB,IAAXG,EAAU,QACjB,MAAmBf,OAAOgB,QAAQD,EAAGtH,OAArC,eAA6C,CAAC,IAAD,sBAAnCwH,EAAmC,KAAhCC,EAAgC,KACzCL,EAASI,IAAMJ,EAASI,IAAM,GAAKC,EAEvCJ,EAAIpG,KAAK,CAAEmF,IAAKkB,EAAGlB,IAAKpG,MAAM,eAAMoH,MAR5B,8BAUZ,OAAOC,KAKnBL,EAAawC,EACb,IACM5I,EADOrB,EAAGgG,WAAU,SAAAhH,GAAC,OAAIA,EAAEK,QACV4G,QAAQ1F,MAE/Ba,EAAOC,EAAWC,GACOD,EAAU,GAAGwF,IAAtC,IAKM0B,EAAY5E,iBAAkBoC,GAE9BmE,EAAS,GAIf7I,EAAUtC,SAAQ,SAACgJ,EAAIoC,GACnB,IAXQ3I,EAWF6H,EAAKtB,EAAGlB,IACRnB,EAAQpE,EAAO6I,GACrBD,EAAOxI,KACHiC,YACe4E,GACVvC,UAAUA,GACVC,MAAMwB,EAAY4B,GAjBnB7H,EAiB2B6H,EAhB5B,SAAArK,GAAC,OAAIA,EAAEyB,MAAMe,IAAM,KAiBjBF,OAAOoE,OAKpB,IAAIS,EAAS,IACTC,EAAS,IAsBb,OApBG3B,EAAW1B,MAAM,OAChBqD,EAAS3B,EAAW1B,MAAM,KAAOqD,EACjCD,EAAS1B,EAAW1B,MAAM,KAAOoD,GAErCoC,EAEKE,UAAS,GACT1F,MAAMqD,GACNnD,OAAOkD,GACPuC,SAAQ,GACRC,YAAY,IACZtC,QAAQ,CAAEI,KAAM,GAAIH,IAAK,GAAIC,MAAO,GAAIC,OAAQ,KAChDpH,EAAE4J,sBAAYC,OAAO,CAAC,IAAIhK,KAAK,KAAM,EAAG,GAAIC,MAASgK,IAAI,EAAG,UAC5DkB,QAAQF,GAEb3B,EACKpB,QACAC,MAAM,GACN+B,YAAW,SAAAjB,GAAC,OAAIhJ,IAAOgJ,GAAGkB,OAAO,YAE/Bb,GAGE8B,EAAkB,SAAAzJ,GAC3B,OACI,kBAAC,EAAD,CAAesE,cAAeoC,EAAerD,OAAQrD,EAAMqD,UC7FtDqG,EAAkB,SAAA1J,GAC3B,IACIZ,EADE6D,EAAU/F,IAAMgG,WAAWjG,GAEJ,WAAzB+C,EAAMqD,OAAOC,QACblE,EAAK6D,EAAQ7D,GACmB,WAAzBY,EAAMqD,OAAOC,UACpBlE,EAAK6D,EAAQvE,KAEjB,IAEMiL,EAFYvK,EAAGgG,WAAU,SAAAhH,GAAC,OAAIA,EAAEC,QACdgH,QACL1F,MACbiK,EAAOtL,IAAOuL,IAAIF,EAAKvJ,KAAI,SAAA5B,GAAC,OAAIA,EAAEyH,QAAMuC,OAAO,SAErD,OAAO,kBAAC,WAAD,KAAWoB,I,wECOTE,EAAY,SAAA9J,GACrB,IAAM+J,EAAmB,CACrB,CACIC,SAAU,UACVC,KACI,kBAACC,EAAA,EAAIC,KAAL,CAAUC,SAAS,MAAMnE,IAAK,GAC1B,kBAAC,EAAD,CAAW5C,OAAQ,CAAEuD,SAAS,EAAMtD,QAAS,cAIzD,CACI0G,SAAU,QACVC,KACI,kBAACC,EAAA,EAAIC,KAAL,CAAUC,SAAS,MAAMnE,IAAK,GAC1B,kBAAC,EAAD,CAAW5C,OAAQ,CAAEuD,SAAS,EAAOtD,QAAS,eAKxD+G,EAAc,CAChB,CACIL,SAAU,UACVC,KACI,kBAACC,EAAA,EAAIC,KAAL,CAAUC,SAAS,MAAMnE,IAAK,GAC1B,kBAAC,EAAD,CACI5C,OAAQ,CAAEuD,SAAS,EAAMtD,QAAS,cAKlD,CACI0G,SAAU,QACVC,KACI,kBAACC,EAAA,EAAIC,KAAL,CAAUC,SAAS,MAAMnE,IAAK,GAC1B,kBAAC,EAAD,CACI5C,OAAQ,CAAEuD,SAAS,EAAOtD,QAAS,eAOjDgH,EACF,kBAACC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,IAAN,CAAUC,QAAS,IAGf,kBAACF,EAAA,EAAKG,OAAN,CAAavI,MAAO,GAEhB,kBAACoI,EAAA,EAAD,KACI,kBAACI,EAAA,EAAD,CAASC,UAAQ,EAACH,QAAS,GACvB,kBAACF,EAAA,EAAKG,OAAN,CAAavI,MAAO,GAChB,kBAAC0I,EAAA,EAAD,CAAWD,UAAQ,EAACE,KAAK,SACrB,kBAACC,EAAA,EAAD,KACI,kBAAC,EAAD,CACI1H,OAAQ,CACJC,QAAS,SACTuF,OAAO,MAInB,kBAACmC,EAAA,EAAD,sBAGR,kBAACT,EAAA,EAAKG,OAAN,CAAavI,MAAO,GAChB,kBAAC0I,EAAA,EAAD,CAAWC,KAAK,SACZ,kBAACC,EAAA,EAAD,KACI,kBAAC,EAAD,CACI1H,OAAQ,CACJC,QAAS,SACTuF,OAAO,EACPoC,MAAM,MAIlB,kBAACD,EAAA,EAAD,kBACA,kBAACA,EAAA,EAAD,UACO,IACH,kBAAC,EAAD,CACI3H,OAAQ,CAAEC,QAAS,gBAOvC,kBAACiH,EAAA,EAAKG,OAAN,CAAavI,MAAO,IAChB,kBAAC+I,EAAA,EAAD,KACI,kBAAC,EAAD,CAAe7H,OAAQ,CAAEC,QAAS,gBAMlD,kBAACiH,EAAA,EAAKG,OAAN,CAAavI,MAAO,GAChB,kBAAC+H,EAAA,EAAD,CACIiB,KAAM,CAAEC,WAAW,EAAMC,UAAU,GACnCC,MAAOvB,EACPwB,kBAAkB,KAG1B,kBAAChB,EAAA,EAAKG,OAAN,CAAavI,MAAO,GAChB,kBAAC+H,EAAA,EAAD,CACIiB,KAAM,CAAEC,WAAW,EAAMC,UAAU,GACnCC,MAAOjB,EACPkB,kBAAkB,MAK9B,kBAAChB,EAAA,EAAKC,IAAN,CAAUC,QAAS,GACf,kBAACF,EAAA,EAAKG,OAAN,QAINc,EAAqB,CACvB,CACIxB,SAAU,UACVC,KACI,kBAACC,EAAA,EAAIC,KAAL,CAAUC,SAAS,MAAMnE,IAAK,IAC1B,kBAAC,EAAD,CAAW5C,OAAQ,CAAEuD,SAAS,EAAMtD,QAAS,cAIzD,CACI0G,SAAU,QACVC,KACI,kBAACC,EAAA,EAAIC,KAAL,CAAUC,SAAS,MAAMnE,IAAK,IAC1B,kBAAC,EAAD,CAAW5C,OAAQ,CAAEuD,SAAS,EAAOtD,QAAS,eAKxDmI,EAAgB,CAClB,CACIzB,SAAU,UACVC,KACI,kBAACC,EAAA,EAAIC,KAAL,CAAUC,SAAS,MAAMnE,IAAK,IAC1B,kBAAC,EAAD,CACI5C,OAAQ,CAAEuD,SAAS,EAAMtD,QAAS,cAKlD,CACI0G,SAAU,QACVC,KACI,kBAACC,EAAA,EAAIC,KAAL,CAAUC,SAAS,MAAMnE,IAAK,IAC1B,kBAAC,EAAD,CACI5C,OAAQ,CAAEuD,SAAS,EAAOtD,QAAS,eAMjDoI,EACF,kBAACnB,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,IAAN,CAAUC,QAAS,IAGf,kBAACF,EAAA,EAAKG,OAAN,CAAavI,MAAO,GAChB,kBAACoI,EAAA,EAAD,KACI,kBAACI,EAAA,EAAD,CAASC,UAAQ,EAACH,QAAS,GACvB,kBAACF,EAAA,EAAKG,OAAN,CAAavI,MAAO,GAChB,kBAAC0I,EAAA,EAAD,CAAWC,KAAK,SACZ,kBAACC,EAAA,EAAD,KACI,kBAAC,EAAD,CACI1H,OAAQ,CACJC,QAAS,SACTuF,OAAO,MAInB,kBAACmC,EAAA,EAAD,2BAKR,kBAACT,EAAA,EAAKG,OAAN,CAAavI,MAAO,GAChB,kBAAC0I,EAAA,EAAD,CAAWC,KAAK,SACZ,kBAACC,EAAA,EAAD,KACI,kBAAC,EAAD,CACI1H,OAAQ,CACJC,QAAS,SACTuF,OAAO,EACPoC,MAAM,MAIlB,kBAACD,EAAA,EAAD,uBACA,kBAACA,EAAA,EAAD,UACO,IACH,kBAAC,EAAD,CACI3H,OAAQ,CAAEC,QAAS,gBAMvC,kBAACiH,EAAA,EAAKG,OAAN,CAAavI,MAAO,IAChB,kBAAC+I,EAAA,EAAD,KACI,kBAAC,EAAD,CAAe7H,OAAQ,CAAEC,QAAS,gBAKlD,kBAACiH,EAAA,EAAKG,OAAN,CAAavI,MAAO,GAChB,kBAAC+H,EAAA,EAAD,CACIiB,KAAM,CAAEC,WAAW,EAAMC,UAAU,GACnCC,MAAOE,EACPD,kBAAkB,KAG1B,kBAAChB,EAAA,EAAKG,OAAN,CAAavI,MAAO,GAChB,kBAAC+H,EAAA,EAAD,CACIiB,KAAM,CAAEC,WAAW,EAAMC,UAAU,GACnCC,MAAOG,EACPF,kBAAkB,MAK9B,kBAAChB,EAAA,EAAKC,IAAN,CAAUC,QAAS,GACf,kBAACF,EAAA,EAAKG,OAAN,QAKNiB,EACF,kBAACpB,EAAA,EAAD,KACI,kBAACI,EAAA,EAAD,CAASC,UAAQ,GAEb,kBAAC5F,EAAA,EAAD,CAAQC,GAAG,MAAX,iBAGJ,kBAACsF,EAAA,EAAKC,IAAN,CAAUI,UAAQ,EAACH,QAAS,GACxB,kBAACF,EAAA,EAAKG,OAAN,CAAavI,MAAO,GAChB,kBAAC+I,EAAA,EAAD,KACI,kBAAC,EAAD,CACI7H,OAAQ,CAAEC,QAAS,SAAUC,WAAW,OAIpD,kBAACgH,EAAA,EAAKG,OAAN,CAAavI,MAAO,GAChB,kBAAC+I,EAAA,EAAD,KACI,kBAAC,EAAD,CACI7H,OAAQ,CAAEC,QAAS,SAAUC,WAAW,SAO1DqI,EACF,kBAACrB,EAAA,EAAD,KACI,kBAACI,EAAA,EAAD,CAASC,UAAQ,GAEb,kBAAC5F,EAAA,EAAD,CAAQC,GAAG,MAAX,sBAGJ,kBAACsF,EAAA,EAAKC,IAAN,CAAUI,UAAQ,EAACH,QAAS,GACxB,kBAACF,EAAA,EAAKG,OAAN,CAAavI,MAAO,GAChB,kBAAC+I,EAAA,EAAD,KACI,kBAAC,EAAD,CACI7H,OAAQ,CAAEC,QAAS,SAAUC,WAAW,OAIpD,kBAACgH,EAAA,EAAKG,OAAN,CAAavI,MAAO,GAChB,kBAAC+I,EAAA,EAAD,KACI,kBAAC,EAAD,CACI7H,OAAQ,CAAEC,QAAS,SAAUC,WAAW,SAO1D+H,EAAQ,CACV,CACItB,SAAU,iBACVC,KACI,kBAACC,EAAA,EAAIC,KAAL,CAAUC,SAAS,MAAMnE,IAAK,GACzBqE,IAIb,CACIN,SAAU,aACVC,KACI,kBAACC,EAAA,EAAIC,KAAL,CAAUC,SAAS,MAAMnE,IAAK,GACzByF,IAIb,CACI1B,SAAU,cACVC,KACI,kBAACC,EAAA,EAAIC,KAAL,CAAUC,SAAS,MAAMnE,IAAK,GACzB0F,IAIb,CACI3B,SAAU,mBACVC,KACI,kBAACC,EAAA,EAAIC,KAAL,CAAUC,SAAS,MAAMnE,IAAK,GACzB2F,KAKjB,OACI,6BACI,kBAAC,EAAD,KACI,kBAACV,EAAA,EAAD,CAASpG,MAAM,QAAQ+G,UAAQ,GAC3B,kBAAC7G,EAAA,EAAD,CAAQF,MAAM,SAASgH,GAAG,QAAQC,UAAU,UACxC,kBAACC,EAAA,EAAD,CAAMC,KAAK,cADf,uCAKJ,kBAACf,EAAA,EAAD,KACI,kBAAChB,EAAA,EAAD,CACIiB,KAAM,CAAEC,WAAW,EAAMC,UAAU,GACnCC,MAAOA,EACPC,kBAAkB,KAG1B,kBAACL,EAAA,EAAD,CAASpG,MAAM,UAAf,eACiB,IACb,uBAAGoH,KAAK,2BAAR,kBCrVLC,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCIcC,QACW,cAA7BnK,OAAOoK,SAASC,UAEe,UAA7BrK,OAAOoK,SAASC,UAEhBrK,OAAOoK,SAASC,SAASC,MACvB,2DCZNC,IAASjI,OACP,kBAAC,IAAMkI,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5N,MAAK,SAAA6N,GACJA,EAAaC,gBAEd3N,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAM2N,c","file":"static/js/main.dd58f7f9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"dc/dist/style/dc.css\";\nimport { csv } from \"d3-fetch\";\nimport moment from \"moment\";\nimport * as crossfilter from \"crossfilter\";\nexport const CXContext = React.createContext(\"CXContext\");\n\nexport default class DataContext extends Component {\n    state = {\n        detailData: null,\n        deathData: null,\n        loading: false,\n        hasCF: false\n    };\n    componentDidMount() {\n        if (this.state.hasCF) {\n            return;\n        }\n        if (this.state.loading) {\n            return;\n        }\n        const dateFormat = \"D-MMM-YYYY\";\n        const urlBase =\n            \"https://docs.google.com/spreadsheets/d/1C59nxtgcnwGyo6lgypsgN18duxmwWigjeVdKY58t0mU/gviz/tq?tqx=out:csv&sheet=\";\n        const url = urlBase + \"DT&range=C:G\";\n        const url2g = urlBase + \"Dth&range=B:F\";\n        const url2 =\n            \"https://docs.googe.com/spreadsheets/d/1C59nxtgcnwGyo6lgypsgN18duxmwWigjeVdKY58t0mU/gviz/tq?tqx=out:csv&sheet=\";\n        this.setState({ loading: true });\n\n        const processDetailData = data => {\n            data.forEach(d => {\n                d.Date = moment(d.Date + \"-2020\", dateFormat);\n            });\n            data = data.filter(x => x.Prov !== \"RC\");\n            this.cf = crossfilter(data);\n            const clonedData = JSON.parse(JSON.stringify(data));\n            clonedData.forEach(x => {\n                x.Date = moment(x.Date);\n            });\n            this.cfn = crossfilter(clonedData);\n            return data;\n        };\n\n        const processDeathData = data => {\n            console.log(data);\n            data.forEach(d => {\n                d.Date = moment(d[\"Announced\\n\"] + \"-2020\", dateFormat);\n            });\n            data = data.filter(x => x.Prov !== \"RC\");\n            this.cfd = crossfilter(data);\n            const clonedData = JSON.parse(JSON.stringify(data));\n            clonedData.forEach(x => {\n                x.Date = moment(x.Date);\n            });\n            this.cfdn = crossfilter(clonedData);\n            return data;\n        };\n        //backup URL's in case there are CORS errors\n        const backupUrlBase = \"https://cors-anywhere.herokuapp.com/\";\n        const backupUrl = backupUrlBase + url;\n        const backupUrl2 = backupUrlBase + url2g;\n\n        const p1 = csv(url)\n            .then(processDetailData)\n            .catch(error => {\n                console.log(\"failed with url\", error);\n                return csv(backupUrl)\n                    .then(processDeathData)\n                    .catch(error => {\n                        console.log(\"backuperror 1\", error);\n                    });\n            });\n\n        const p2 = csv(url2g)\n            .then(processDeathData)\n            .catch(error => {\n                console.log(\"failed with url2\", error);\n                return csv(backupUrl2)\n                    .then(processDeathData)\n                    .catch(error => {\n                        console.log(\"backuperror 2\", error);\n                    });\n            });\n\n        Promise.all([p1, p2]).then(x => {\n            console.log(\"all done\", x);\n            this.setState({\n                loading: false,\n                hasCF: true,\n                detailData: x[0],\n                deathData: x[1]\n            });\n        });\n    }\n    render() {\n        if (!this.state.hasCF) {\n            return null;\n        }\n        return (\n            <CXContext.Provider\n                value={{\n                    cf: this.cf,\n                    cfd: this.cfd,\n                    cfn: this.cfn,\n                    cfdn: this.cfdn\n                }}\n            >\n                <div ref={this.parent}>{this.props.children}</div>\n            </CXContext.Provider>\n        );\n    }\n}\n","import { rgb } from \"d3-color\";\nimport { useState, useEffect } from 'react';\n\nexport const colorf = () => {\n    //http://tsitsul.in/blog/coloropt/\n    const cols = [\n        [235, 172, 35],\n        [184, 0, 88],\n        [0, 140, 249],\n        [0, 110, 0],\n        [0, 187, 173],\n        [209, 99, 230],\n        [178, 69, 2],\n        [255, 146, 135],\n        [89, 84, 214],\n        [0, 198, 248],\n        [135, 133, 0],\n        [0, 167, 108],\n        [189, 189, 189]\n    ];\n    return cols.map(x =>\n        rgb(x[0], x[1], x[2])\n            .darker()\n            .formatHex()\n    );\n};\n\nexport const sortpc = (provinces, colors) => {\n    const merged = [];\n    for (let i = 0; i < provinces.length; i++) {\n        merged.push({ a1: provinces[i], a2: colors[i] });\n    }\n    merged.sort((x, y) => x.a1.value - y.a1.value);\n    for (let i = 0; i < merged.length; i++) {\n        provinces[i] = merged[i].a1;\n        colors[i] = merged[i].a2;\n    }\n    // console.log(provinces, colors);\n};\n\nexport const population = {\n    ON: 14.71,\n    QC: 8.53,\n    BC: 5.11,\n    AB: 4.41,\n    SK: 1.18,\n    NL: 0.52,\n    NS: 0.98,\n    MB: 1.38,\n    NB: 0.78,\n    PE: 0.16,\n    YT: 0.041,\n    NT: 0.044,\n    NU: 0.039\n};\n\n\nfunction getWindowDimensions() {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height\n  };\n}\n\nexport function useWindowDimensions() {\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return windowDimensions;\n}\n","import React, { Fragment } from \"react\";\nimport { CXContext } from \"./cxContext\";\nimport * as dc from \"dc\";\nimport { css } from \"glamor\";\nimport { Header, Label, Icon, Popup } from \"semantic-ui-react\";\nimport { useWindowDimensions} from \"../util\";\n\nconst ResetButton = props => {\n    const style = css({\n        cursor: \"pointer\"\n    });\n    return (\n        <Label\n            {...style}\n            onClick={() => {\n                props.chart.filterAll();\n                dc.redrawAll();\n            }}\n        >\n            reset\n        </Label>\n    );\n};\nexport const ChartTemplate = props => {\n    const context = React.useContext(CXContext);\n    const [chart, updateChart] = React.useState(null);\n    let cf;\n    if (props.params.usedata === \"detail\") {\n        cf = context.cf;\n        if (props.params.normalize) {\n            cf = context.cfn;\n        }\n    } else if (props.params.usedata === \"deaths\") {\n        cf = context.cfd;\n        if (props.params.normalize) {\n            cf = context.cfdn;\n        }\n    }\n    const div = React.useRef(null);\n    const windowSize = useWindowDimensions()\n    React.useEffect(() => {\n        const newChart = props.chartFunction(div.current, cf, props.params, windowSize);\n\n        newChart.render();\n        updateChart(newChart);\n    }, [props.params]);\n\n    let button;\n    let label;\n    if (props.reset) {\n        button = <ResetButton chart={chart} />;\n        label= <Popup content=\"Pick province(s) to filter results and click Reset to restore defaults\" trigger={<Label circular color='teal'>?</Label>}/>\n    }\n    let header;\n    if (props.title) {\n        header = (\n            <Header as=\"h3\">\n                {props.title}\n                {button}\n                {label}\n            </Header>\n        );\n    }\n\n    return (\n        <Fragment>\n            {header}\n            <div ref={div}></div>\n        </Fragment>\n    );\n};\n","import React from \"react\";\nimport * as dc from \"dc\";\nimport { ChartTemplate } from \"./chartTemplate\";\nimport { colorf, sortpc, population } from \"../util\";\n\nconst provinceChartFunc = (divRef, cf, params, windowSize) => {\n    const dimension = cf.dimension(d => d.Prov);\n    const group = dimension.group();\n\n    const colors = colorf();\n    const provinces = group.all();\n    sortpc(provinces, colors);\n    const provinceChart = dc.rowChart(divRef);\n    const normalize = params.normalize;\n    let chartH = 300\n    let chartW = 350\n    \n    if(windowSize.width<1440){\n        chartW = windowSize.width/1440 * chartW;\n        chartH = windowSize.width/1440 * chartH;\n    }\n    provinceChart\n        .width(chartW)\n        .height(chartH)\n        .margins({ top: 10, right: 50, bottom: 30, left: 40 })\n        .dimension(dimension)\n        .group(group)\n        .elasticX(true)\n        .labelOffsetX(-25)\n        .valueAccessor(x => (normalize ? x.value / population[x.key] : x.value))\n        .ordinalColors(\n            colors.slice(0, Object.keys(provinces).length).reverse()\n        );\n\n    provinceChart.xAxis().ticks(5);\n    return provinceChart;\n};\n\nexport const ProvinceChart = props => {\n    return (\n        <ChartTemplate\n            chartFunction={provinceChartFunc}\n            title=\"Province Totals\"\n            reset={true}\n            params={props.params}\n        />\n    );\n};\n","import React from \"react\";\nimport * as dc from \"dc\";\nimport { ChartTemplate } from \"./chartTemplate\";\nimport { scaleTime } from \"d3\";\nimport moment from \"moment\";\nimport { colorf, sortpc} from \"../util\";\n\nconst timeChartFunc = (divRef, cf, params, windowSize) => {\n    const dimension = cf.dimension(d => d.Date);\n    const group = dimension.group();\n    const stack = params.stacked;\n    let chartGroup = group;\n    const colors = colorf();\n    if (stack) {\n        const pCounts = group.reduce(\n            (p, v) => {\n                p[v.Prov] = (p[v.Prov] || 0) + 1;\n                return p;\n            },\n            (p, v) => {\n                p[v.Prov] = p[v.Prov] - 1;\n                return p;\n            },\n            () => ({})\n        );\n        function accumulate_group(source_group) {\n            return {\n                all: function() {\n                    const sa = source_group.all();\n                    const cumulate = {};\n                    const res = [];\n                    for (const el of sa) {\n                        for (let [k, v] of Object.entries(el.value)) {\n                            cumulate[k] = (cumulate[k] || 0) + v;\n                        }\n                        res.push({ key: el.key, value: { ...cumulate } });\n                    }\n                    return res;\n                }\n            };\n        }\n        const ag = accumulate_group(pCounts);\n        chartGroup = ag;\n    } else {\n        function accumulate_group(source_group) {\n            return {\n                all: function() {\n                    const sa = source_group.all();\n                    let cumulate = 0;\n                    const res = [];\n                    for (const el of sa) {\n                        cumulate += el.value;\n                        res.push({ key: el.key, value: cumulate });\n                    }\n                    return res;\n                }\n            };\n        }\n        chartGroup = accumulate_group(group);\n    }\n    const pdim = cf.dimension(d => d.Prov);\n    const provinces = pdim.group().all();\n    //sort provinces and colors together\n    sortpc(provinces, colors);\n    const smallestProvince = provinces[0].key;\n    const sel = i => {\n        return d => d.value[i] || 0;\n    };\n\n    const timeChart = dc.lineChart(divRef);\n\n    if (stack) {\n        timeChart\n            .dimension(dimension)\n            .group(chartGroup, smallestProvince, sel(smallestProvince));\n    } else {\n        timeChart.dimension(dimension).group(chartGroup);\n    }\n    let chartH = 350\n    let chartW = 475\n    \n    if(windowSize.width<1440){\n        chartW = windowSize.width/1440 * chartW;\n        chartH = windowSize.width/1440 * chartH;\n    }\n\n    timeChart\n        .renderArea(true)\n        .elasticY(true)\n        .width(chartW)\n        .height(chartH)\n        .brushOn(false)\n        .clipPadding(10)\n        .margins({ left: 40, top: 10, right: 10, bottom: 20 })\n        .renderDataPoints({ radius: 2, fillOpacity: 1 })\n        .xyTipsOn(true)\n        .x(scaleTime().domain([new Date(2020, 2, 1), moment().add(1, \"day\")]))\n        .ordinalColors(colors)\n        .xAxis()\n        .ticks(8)\n        .tickFormat(v => moment(v).format(\"DD/MM\"));\n\n    if (stack) {\n        for (const p of provinces.slice(1)) {\n            const pk = p.key;\n            timeChart.stack(chartGroup, pk, sel(pk));\n        }\n    }\n\n    return timeChart;\n};\n\nexport const TimeChart = props => {\n    return (\n        <ChartTemplate\n            chartFunction={timeChartFunc}\n            title=\"Cumulative\"\n            params={props.params}\n        />\n    );\n};\n","import React from \"react\";\nimport * as dc from \"dc\";\nimport { ChartTemplate } from \"./chartTemplate\";\n\nconst statNumberFunc = (divRef, cf, params) => {\n    const dimension = cf.dimension(d => d.Date);\n    let group\n    let getValue\n    if(params.total){\n        group = dimension.groupAll();\n        getValue = x=>x;\n    }\n    else{\n        group = dimension.group()\n        getValue = x=>x.value;\n    }\n    const quarterChart = dc.numberDisplay(divRef);\n    quarterChart\n    .valueAccessor(getValue)\n    .ordering(x=>x.key)\n    .group(group);\n    return quarterChart\n}\n\nexport const StatNumber = props => {\n    return <ChartTemplate chartFunction={statNumberFunc} title=\"\" params={props.params}/>\n}","import React from \"react\";\nimport * as dc from \"dc\";\nimport { ChartTemplate } from \"./chartTemplate\";\nimport { scaleTime } from \"d3\";\nimport moment from \"moment\";\nimport { colorf, sortpc } from \"../util\";\n\nconst dailyTimeChartFunc = (divRef, cf, params, windowSize) => {\n    const dimension = cf.dimension(d => d.Date);\n    const group = dimension.group();\n    const stack = params.stacked;\n    let chartGroup = group;\n    if (stack) {\n        const pCounts = group.reduce(\n            (p, v) => {\n                p[v.Prov] = (p[v.Prov] || 0) + 1;\n                return p;\n            },\n            (p, v) => {\n                p[v.Prov] = (p[v.Prov] || 0) - 1;\n                return p;\n            },\n            () => ({})\n        );\n        chartGroup = pCounts;\n    }\n    const pdim = cf.dimension(d => d.Prov);\n    const provinces = pdim.group().all();\n    const sel = i => {\n        return d => d.value[i] || 0;\n    };\n\n    const colors = colorf();\n    sortpc(provinces, colors);\n\n    const timeChart = dc.lineChart(divRef);\n\n    const smallestProvince = provinces[0].key;\n    if (stack) {\n        timeChart\n            .dimension(dimension)\n            .group(chartGroup, smallestProvince, sel(smallestProvince));\n    } else {\n        timeChart.dimension(dimension).group(chartGroup);\n    }\n    let chartH = 350\n    let chartW = 475\n    \n    if(windowSize.width<1440){\n        chartW = windowSize.width/1440 * chartW;\n        chartH = windowSize.width/1440 * chartH;\n    }\n    timeChart\n        .renderArea(true)\n        .elasticY(true)\n        .width(chartW)\n        .height(chartH)\n        .brushOn(false)\n        .clipPadding(10)\n        .margins({ left: 40, top: 10, right: 10, bottom: 20 })\n        .renderDataPoints({ radius: 2, fillOpacity: 1 })\n        .ordinalColors(colors)\n        .x(scaleTime().domain([new Date(2020, 2, 1), moment().add(1, \"day\")]))\n        .xAxis()\n        .ticks(5)\n        .tickFormat(v => moment(v).format(\"DD/MM\"));\n\n    if (stack) {\n        for (const p of provinces.slice(1)) {\n            const pk = p.key;\n            timeChart.stack(chartGroup, pk, sel(pk));\n        }\n    }\n\n    return timeChart;\n};\n\nexport const DailyTimeChart = props => {\n    return (\n        <ChartTemplate\n            chartFunction={dailyTimeChartFunc}\n            title=\"Daily\"\n            params={props.params}\n        />\n    );\n};\n","import React from \"react\";\nimport * as dc from \"dc\";\nimport { ChartTemplate } from \"./chartTemplate\";\nimport { scaleTime } from \"d3\";\nimport moment from \"moment\";\nimport { colorf, sortpc, population } from \"../util\";\n\nconst timeChartFunc = (divRef, cf, params, windowSize) => {\n    const dimension = cf.dimension(d => d.Date);\n    const group = dimension.group();\n    let chartGroup = group;\n    const colors = colorf();\n    const pCounts = group.reduce(\n        (p, v) => {\n            p[v.Prov] = (p[v.Prov] || 0) + 1 / population[v.Prov];\n            return p;\n        },\n        (p, v) => {\n            p[v.Prov] = p[v.Prov] - 1 / population[v.Prov];\n            return p;\n        },\n        () => ({})\n    );\n    function accumulate_group(source_group) {\n        return {\n            all: function() {\n                const sa = source_group.all();\n                const cumulate = {};\n                const res = [];\n                for (const el of sa) {\n                    for (let [k, v] of Object.entries(el.value)) {\n                        cumulate[k] = (cumulate[k] || 0) + v;\n                    }\n                    res.push({ key: el.key, value: { ...cumulate } });\n                }\n                return res;\n            }\n        };\n    }\n    const ag = accumulate_group(pCounts);\n    chartGroup = ag;\n    const pdim = cf.dimension(d => d.Prov);\n    const provinces = pdim.group().all();\n    //sort provinces and colors together\n    sortpc(provinces, colors);\n    const smallestProvince = provinces[0].key;\n    const sel = i => {\n        return d => d.value[i] || 0;\n    };\n\n    const timeChart = dc.compositeChart(divRef);\n\n    const charts = [];\n\n    // for(const p of provinces) {\n    // for(let i of provinces) {\n    provinces.forEach((el, ix) => {\n        const pk = el.key;\n        const color = colors[ix];\n        charts.push(\n            dc\n                .lineChart(timeChart)\n                .dimension(dimension)\n                .group(chartGroup, pk, sel(pk))\n                .colors(color)\n            // .renderDataPoints({ radius: 2, fillOpacity: 1 })\n        );\n    });\n\n    let chartH = 350\n    let chartW = 475\n    \n    if(windowSize.width<1440){\n        chartW = windowSize.width/1440 * chartW;\n        chartH = windowSize.width/1440 * chartH;\n    }\n    timeChart\n        // .renderArea(true)\n        .elasticY(true)\n        .width(chartW)\n        .height(chartH)\n        .brushOn(false)\n        .clipPadding(10)\n        .margins({ left: 50, top: 10, right: 10, bottom: 20 })\n        .x(scaleTime().domain([new Date(2020, 2, 1), moment().add(1, \"day\")]))\n        .compose(charts);\n\n    timeChart\n        .xAxis()\n        .ticks(5)\n        .tickFormat(v => moment(v).format(\"DD/MM\"));\n\n    return timeChart;\n};\n\nexport const NormalizedChart = props => {\n    return (\n        <ChartTemplate chartFunction={timeChartFunc} params={props.params} />\n    );\n};\n","import React, { Fragment } from \"react\";\nimport { CXContext } from \"./cxContext\";\nimport moment from \"moment\";\n\nexport const LastDateDisplay = props => {\n    const context = React.useContext(CXContext);\n    let cf;\n    if (props.params.usedata === \"detail\") {\n        cf = context.cf;\n    } else if (props.params.usedata === \"deaths\") {\n        cf = context.cfd;\n    }\n    const dimension = cf.dimension(d => d.Date);\n    const group = dimension.group();\n    const vals = group.all();\n    const last = moment.max(vals.map(x => x.key)).format(\"D-MMM\");\n\n    return <Fragment>{last}</Fragment>;\n};\n","import React from \"react\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nimport { ProvinceChart } from \"./provinceChart\";\nimport { TimeChart } from \"./timeChart\";\nimport { StatNumber } from \"./statNumber\";\nimport { DailyTimeChart } from \"./dailyTimeChart\";\nimport { NormalizedChart } from \"./normalizedChart\";\nimport { LastDateDisplay } from \"./textDisplay\";\nimport DataContext from \"./cxContext\";\nimport {\n    Grid,\n    Tab,\n    Segment,\n    Label,\n    Statistic,\n    StatisticValue,\n    StatisticLabel,\n    GridRow,\n    Header,\n    HeaderContent,\n    Icon\n} from \"semantic-ui-react\";\n\nexport const Dashboard = props => {\n    const panes_cumulative = [\n        {\n            menuItem: \"Stacked\",\n            pane: (\n                <Tab.Pane attached=\"top\" key={1}>\n                    <TimeChart params={{ stacked: true, usedata: \"detail\" }} />\n                </Tab.Pane>\n            )\n        },\n        {\n            menuItem: \"Total\",\n            pane: (\n                <Tab.Pane attached=\"top\" key={2}>\n                    <TimeChart params={{ stacked: false, usedata: \"detail\" }} />\n                </Tab.Pane>\n            )\n        }\n    ];\n    const panes_daily = [\n        {\n            menuItem: \"Stacked\",\n            pane: (\n                <Tab.Pane attached=\"top\" key={3}>\n                    <DailyTimeChart\n                        params={{ stacked: true, usedata: \"detail\" }}\n                    />\n                </Tab.Pane>\n            )\n        },\n        {\n            menuItem: \"Total\",\n            pane: (\n                <Tab.Pane attached=\"top\" key={4}>\n                    <DailyTimeChart\n                        params={{ stacked: false, usedata: \"detail\" }}\n                    />\n                </Tab.Pane>\n            )\n        }\n    ];\n\n    const cases = (\n        <Grid>\n            <Grid.Row columns={16}>\n                {/* <GenderChart/>\n            <AgeChart/> */}\n                <Grid.Column width={4}>\n                    {/* <Checkbox toggle label=\"Normalize to population\"></Checkbox> */}\n                    <Grid>\n                        <GridRow centered columns={1}>\n                            <Grid.Column width={6}>\n                                <Statistic centered size=\"small\">\n                                    <StatisticValue>\n                                        <StatNumber\n                                            params={{\n                                                usedata: \"detail\",\n                                                total: true\n                                            }}\n                                        />\n                                    </StatisticValue>\n                                    <StatisticLabel>Total cases</StatisticLabel>\n                                </Statistic>\n                            </Grid.Column>\n                            <Grid.Column width={6}>\n                                <Statistic size=\"small\">\n                                    <StatisticValue>\n                                        <StatNumber\n                                            params={{\n                                                usedata: \"detail\",\n                                                total: false,\n                                                date: true\n                                            }}\n                                        />\n                                    </StatisticValue>\n                                    <StatisticLabel>New cases</StatisticLabel>\n                                    <StatisticLabel>\n                                        On{\" \"}\n                                        <LastDateDisplay\n                                            params={{ usedata: \"detail\" }}\n                                        />\n                                    </StatisticLabel>\n                                </Statistic>\n                            </Grid.Column>\n                        </GridRow>\n\n                        <Grid.Column width={16}>\n                            <Segment>\n                                <ProvinceChart params={{ usedata: \"detail\" }} />\n                            </Segment>\n                        </Grid.Column>\n                    </Grid>\n                    {/* </Grid> */}\n                </Grid.Column>\n                <Grid.Column width={6}>\n                    <Tab\n                        menu={{ secondary: true, pointing: true }}\n                        panes={panes_cumulative}\n                        renderActiveOnly={false}\n                    />\n                </Grid.Column>\n                <Grid.Column width={6}>\n                    <Tab\n                        menu={{ secondary: true, pointing: true }}\n                        panes={panes_daily}\n                        renderActiveOnly={false}\n                    />\n                    {/* <DailyTimeChart params={{usedata:'detail'}}/> */}\n                </Grid.Column>\n            </Grid.Row>\n            <Grid.Row columns={2}>\n                <Grid.Column>{/* <OriginChart/> */}</Grid.Column>\n            </Grid.Row>\n        </Grid>\n    );\n    const panes_cumulative_d = [\n        {\n            menuItem: \"Stacked\",\n            pane: (\n                <Tab.Pane attached=\"top\" key={11}>\n                    <TimeChart params={{ stacked: true, usedata: \"deaths\" }} />\n                </Tab.Pane>\n            )\n        },\n        {\n            menuItem: \"Total\",\n            pane: (\n                <Tab.Pane attached=\"top\" key={12}>\n                    <TimeChart params={{ stacked: false, usedata: \"deaths\" }} />\n                </Tab.Pane>\n            )\n        }\n    ];\n    const panes_daily_d = [\n        {\n            menuItem: \"Stacked\",\n            pane: (\n                <Tab.Pane attached=\"top\" key={13}>\n                    <DailyTimeChart\n                        params={{ stacked: true, usedata: \"deaths\" }}\n                    />\n                </Tab.Pane>\n            )\n        },\n        {\n            menuItem: \"Total\",\n            pane: (\n                <Tab.Pane attached=\"top\" key={14}>\n                    <DailyTimeChart\n                        params={{ stacked: false, usedata: \"deaths\" }}\n                    />\n                </Tab.Pane>\n            )\n        }\n    ];\n    const deaths = (\n        <Grid>\n            <Grid.Row columns={16}>\n                {/* <GenderChart/>\n            <AgeChart/> */}\n                <Grid.Column width={4}>\n                    <Grid>\n                        <GridRow centered columns={3}>\n                            <Grid.Column width={6}>\n                                <Statistic size=\"small\">\n                                    <StatisticValue>\n                                        <StatNumber\n                                            params={{\n                                                usedata: \"deaths\",\n                                                total: true\n                                            }}\n                                        />\n                                    </StatisticValue>\n                                    <StatisticLabel>\n                                        Total casualties\n                                    </StatisticLabel>\n                                </Statistic>\n                            </Grid.Column>\n                            <Grid.Column width={6}>\n                                <Statistic size=\"small\">\n                                    <StatisticValue>\n                                        <StatNumber\n                                            params={{\n                                                usedata: \"deaths\",\n                                                total: false,\n                                                date: true\n                                            }}\n                                        />\n                                    </StatisticValue>\n                                    <StatisticLabel>New casualties</StatisticLabel>\n                                    <StatisticLabel>\n                                        On{\" \"}\n                                        <LastDateDisplay\n                                            params={{ usedata: \"deaths\" }}\n                                        />\n                                    </StatisticLabel>\n                                </Statistic>\n                            </Grid.Column>\n                        </GridRow>\n                        <Grid.Column width={16}>\n                            <Segment>\n                                <ProvinceChart params={{ usedata: \"deaths\" }} />\n                            </Segment>\n                        </Grid.Column>\n                    </Grid>\n                </Grid.Column>\n                <Grid.Column width={6}>\n                    <Tab\n                        menu={{ secondary: true, pointing: true }}\n                        panes={panes_cumulative_d}\n                        renderActiveOnly={false}\n                    />\n                </Grid.Column>\n                <Grid.Column width={6}>\n                    <Tab\n                        menu={{ secondary: true, pointing: true }}\n                        panes={panes_daily_d}\n                        renderActiveOnly={false}\n                    />\n                    {/* <DailyTimeChart params={{usedata:'detail'}}/> */}\n                </Grid.Column>\n            </Grid.Row>\n            <Grid.Row columns={2}>\n                <Grid.Column>{/* <OriginChart/> */}</Grid.Column>\n            </Grid.Row>\n        </Grid>\n    );\n\n    const normalized = (\n        <Grid>\n            <GridRow centered>\n                {/* <Grid.Column width={10}> */}\n                <Header as=\"h2\">CASES PER 1M</Header>\n                {/* </Grid.Column> */}\n            </GridRow>\n            <Grid.Row centered columns={5}>\n                <Grid.Column width={4}>\n                    <Segment>\n                        <ProvinceChart\n                            params={{ usedata: \"detail\", normalize: true }}\n                        />\n                    </Segment>\n                </Grid.Column>\n                <Grid.Column width={6}>\n                    <Segment>\n                        <NormalizedChart\n                            params={{ usedata: \"detail\", normalize: true }}\n                        />\n                    </Segment>\n                </Grid.Column>\n            </Grid.Row>\n        </Grid>\n    );\n    const normalizedd = (\n        <Grid>\n            <GridRow centered>\n                {/* <Grid.Column width={10}> */}\n                <Header as=\"h2\">CASUALTIES PER 1M</Header>\n                {/* </Grid.Column> */}\n            </GridRow>\n            <Grid.Row centered columns={5}>\n                <Grid.Column width={4}>\n                    <Segment>\n                        <ProvinceChart\n                            params={{ usedata: \"deaths\", normalize: true }}\n                        />\n                    </Segment>\n                </Grid.Column>\n                <Grid.Column width={6}>\n                    <Segment>\n                        <NormalizedChart\n                            params={{ usedata: \"deaths\", normalize: true }}\n                        />\n                    </Segment>\n                </Grid.Column>\n            </Grid.Row>\n        </Grid>\n    );\n    const panes = [\n        {\n            menuItem: \"Positive cases\",\n            pane: (\n                <Tab.Pane attached=\"top\" key={1}>\n                    {cases}\n                </Tab.Pane>\n            )\n        },\n        {\n            menuItem: \"Casualties\",\n            pane: (\n                <Tab.Pane attached=\"top\" key={2}>\n                    {deaths}\n                </Tab.Pane>\n            )\n        },\n        {\n            menuItem: \"Cases per M\",\n            pane: (\n                <Tab.Pane attached=\"top\" key={3}>\n                    {normalized}\n                </Tab.Pane>\n            )\n        },\n        {\n            menuItem: \"Casualties per M\",\n            pane: (\n                <Tab.Pane attached=\"top\" key={4}>\n                    {normalizedd}\n                </Tab.Pane>\n            )\n        }\n    ];\n    return (\n        <div>\n            <DataContext>\n                <Segment color=\"black\" inverted>\n                    <Header color=\"yellow\" id=\"title\" textAlign=\"center\">\n                        <Icon name=\"heartbeat\" />\n                        Canada Covid-19 data visualization\n                    </Header>\n                </Segment>\n                <Segment>\n                    <Tab\n                        menu={{ secondary: true, pointing: true }}\n                        panes={panes}\n                        renderActiveOnly={false}\n                    />\n                </Segment>\n                <Segment color=\"orange\">\n                    Data source:{\" \"}\n                    <a href=\"https://virihealth.com/\">ViriHealth</a>\n                </Segment>\n            </DataContext>\n        </div>\n    );\n};\n","import React from 'react';\nimport './App.css';\n// import Plot from \"./components/plot\"\nimport { Dashboard } from \"./components/dashboard\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Dashboard/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
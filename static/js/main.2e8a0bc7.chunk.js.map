{"version":3,"sources":["components/cxContext.js","util.js","components/chartTemplate.js","components/provinceChart.js","components/timeChart.js","components/statNumber.js","components/dailyTimeChart.js","components/normalizedChart.js","components/textDisplay.js","components/dashboard.js","App.js","serviceWorker.js","index.js"],"names":["CXContext","React","createContext","DataContext","state","detailData","deathData","dim","loading","hasCF","this","dimensions","dimensionsD","urlBase","url","url2g","setState","processDeathData","data","forEach","d","Date","moment","Total","parseFloat","Deaths","filter","x","Prov","cfd","crossfilter","clonedData","JSON","parse","stringify","cfdn","dimension","p1","csv","then","Cases","cf","cfn","catch","error","console","log","backupUrlBase","p2","Promise","all","Provider","value","ref","parent","props","children","Component","colorf","map","rgb","darker","formatHex","sortpc","provinces","colors","merged","i","length","push","a1","a2","sort","y","population","ON","QC","BC","AB","SK","NL","NS","MB","NB","PE","YT","NT","NU","getWindowDimensions","window","width","innerWidth","height","innerHeight","totalReduce","group","reduce","p","v","provinceTotalReduce","ResetButton","style","css","cursor","Label","onClick","chart","filterAll","dc","ChartTemplate","dims","context","useContext","useState","updateChart","chartData","updateChartData","params","usedata","button","label","header","div","useRef","windowSize","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useWindowDimensions","newChart","chartFunction","current","render","reset","Popup","content","trigger","circular","color","title","Header","as","provinceChartFunc","divRef","hasOwnProperty","chartW","chartH","normalize","provinceChart","margins","top","right","bottom","left","elasticX","labelOffsetX","valueAccessor","key","ordinalColors","slice","Object","keys","reverse","xAxis","ticks","ProvinceChart","timeChartFunc","pgroup","stack","stacked","chartGroup","accumulate_group","source_group","sa","cumulate","res","el","entries","k","smallestProvince","sel","timeChart","renderArea","elasticY","brushOn","clipPadding","xyTipsOn","scaleTime","domain","add","tickFormat","format","pk","TimeChart","statNumberFunc","getValue","total","groupAll","reduceSum","quarterChart","ordering","StatNumber","dailyTimeChartFunc","pdim","provincesG","DailyTimeChart","pCounts","ag","charts","ix","compose","NormalizedChart","LastDateDisplay","vals","last","max","Dashboard","panes_cumulative","menuItem","pane","Tab","Pane","attached","panes_daily","cases","Grid","Row","columns","Column","GridRow","centered","Statistic","size","StatisticValue","StatisticLabel","date","Segment","menu","secondary","pointing","panes","renderActiveOnly","panes_cumulative_d","panes_daily_d","deaths","normalized","normalizedd","inverted","id","textAlign","Icon","name","href","App","className","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.2e8a0bc7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"dc/dist/style/dc.css\";\nimport { csv } from \"d3-fetch\";\nimport moment from \"moment\";\nimport crossfilter from \"crossfilter2\";\nexport const CXContext = React.createContext(\"CXContext\");\n\nexport default class DataContext extends Component {\n    state = {\n        detailData: null,\n        deathData: null,\n        dim:null,\n        loading: false,\n        hasCF: false\n    };\n    componentDidMount() {\n        if (this.state.hasCF) {\n            return;\n        }\n        if (this.state.loading) {\n            return;\n        }\n        this.dimensions = {};\n        this.dimensionsD = {};\n        const dateFormat = \"D-MMM-YYYY\";\n        const urlBase =\n            \"https://docs.google.com/spreadsheets/d/1C59nxtgcnwGyo6lgypsgN18duxmwWigjeVdKY58t0mU/gviz/tq?tqx=out:csv&sheet=\";\n        const url = urlBase + \"Det\";\n        const url2g = urlBase + \"Dth\";\n        this.setState({ loading: true });\n\n        const processDetailData = data => {\n            data.forEach(d => {\n                d.Date = moment(d.Date + \"-2020\", dateFormat);\n                d.Total = parseFloat(d.Cases);\n            });\n            data = data.filter(x => x.Prov !== \"RC\");\n            const cf = crossfilter(data);\n            const clonedData = JSON.parse(JSON.stringify(data));\n            clonedData.forEach(x => {\n                x.Date = moment(x.Date);\n            });\n            const cfn = crossfilter(clonedData);\n\n            this.dimensions['date'] = cf.dimension(d => d.Date);\n            this.dimensions['dateN'] = cfn.dimension(d => d.Date);\n            this.dimensions['prov'] = cf.dimension(d => d.Prov);\n            this.dimensions['provN'] = cfn.dimension(d => d.Prov);\n            return data;\n        };\n\n        const processDeathData = data => {\n            data.forEach(d => {\n                d.Date = moment(d[\"Announced\"] + \"-2020\", dateFormat);\n                d.Total = parseFloat(d.Deaths);\n            });\n            data = data.filter(x => x.Prov !== \"RC\");\n            const cfd = crossfilter(data);\n            const clonedData = JSON.parse(JSON.stringify(data));\n            clonedData.forEach(x => {\n                x.Date = moment(x.Date);\n            });\n            const cfdn = crossfilter(clonedData);\n            this.dimensionsD['date'] = cfd.dimension(d => d.Date);\n            this.dimensionsD['dateN'] = cfdn.dimension(d => d.Date);\n            this.dimensionsD['prov'] = cfd.dimension(d => d.Prov);\n            this.dimensionsD['provN'] = cfdn.dimension(d => d.Prov);\n            return data;\n        };\n        //backup URL's in case there are CORS errors\n        const backupUrlBase = \"https://cors-anywhere.herokuapp.com/\";\n        const backupUrl = backupUrlBase + url;\n        const backupUrl2 = backupUrlBase + url2g;\n\n        const p1 = csv(url)\n            .then(processDetailData)\n            .catch(error => {\n                console.log(\"failed with url\", error);\n                return csv(backupUrl)\n                    .then(processDeathData)\n                    .catch(error => {\n                        console.log(\"backuperror 1\", error);\n                    });\n            });\n\n        const p2 = csv(url2g)\n            .then(processDeathData)\n            .catch(error => {\n                console.log(\"failed with url2\", error);\n                return csv(backupUrl2)\n                    .then(processDeathData)\n                    .catch(error => {\n                        console.log(\"backuperror 2\", error);\n                    });\n            });\n\n        Promise.all([p1, p2]).then(x => {\n            console.log(\"Done fetching data\");\n            this.setState({\n                loading: false,\n                hasCF: true,\n                detailData: x[0],\n                deathData: x[1]\n            });\n        });\n    }\n    render() {\n        if (!this.state.hasCF) {\n            return null;\n        }\n        return (\n            <CXContext.Provider\n                value={{\n                    // cf: this.cf,\n                    // cfd: this.cfd,\n                    // cfn: this.cfn,\n                    // cfdn: this.cfdn\n                    dimensions: this.dimensions,\n                    dimensionsD: this.dimensionsD,\n                }}\n            >\n                <div ref={this.parent}>{this.props.children}</div>\n            </CXContext.Provider>\n        );\n    }\n}\n","import { rgb } from \"d3-color\";\nimport { useState, useEffect } from 'react';\n\nexport const colorf = () => {\n    //http://tsitsul.in/blog/coloropt/\n    const cols = [\n        [235, 172, 35],\n        [184, 0, 88],\n        [0, 140, 249],\n        [0, 110, 0],\n        [0, 187, 173],\n        [209, 99, 230],\n        [178, 69, 2],\n        [255, 146, 135],\n        [89, 84, 214],\n        [0, 198, 248],\n        [135, 133, 0],\n        [0, 167, 108],\n        [189, 189, 189]\n    ];\n    return cols.map(x =>\n        rgb(x[0], x[1], x[2])\n            .darker(.5)\n            .formatHex()\n    );\n};\n\nexport const sortpc = (provinces, colors) => {\n    const merged = [];\n    for (let i = 0; i < provinces.length; i++) {\n        merged.push({ a1: provinces[i], a2: colors[i] });\n    }\n    merged.sort((x, y) => x.a1.value - y.a1.value);\n    for (let i = 0; i < merged.length; i++) {\n        provinces[i] = merged[i].a1;\n        colors[i] = merged[i].a2;\n    }\n    // console.log(provinces, colors);\n};\n\nexport const population = {\n    ON: 14.71,\n    QC: 8.53,\n    BC: 5.11,\n    AB: 4.41,\n    SK: 1.18,\n    NL: 0.52,\n    NS: 0.98,\n    MB: 1.38,\n    NB: 0.78,\n    PE: 0.16,\n    YT: 0.041,\n    NT: 0.044,\n    NU: 0.039\n};\n\n\nfunction getWindowDimensions() {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height\n  };\n}\n\nexport function useWindowDimensions() {\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return windowDimensions;\n}\n\nexport function totalReduce(group){\n    const res = group.reduce(\n            (p, v) => {\n                return p + v.Total;\n            },\n            (p, v) => {\n                return p - v.Total;\n            },\n            () => 0\n        );\n    return res;\n}\n\nexport function provinceTotalReduce(group){\n    const pCounts = group.reduce(\n        (p, v) => {\n            p[v.Prov] = (p[v.Prov] || 0) + v.Total;\n            return p;\n        },\n        (p, v) => {\n            p[v.Prov] = p[v.Prov] - v.Total;\n            return p;\n        },\n        () => ({})\n    );\n    return pCounts;\n}","import React, { Fragment } from \"react\";\nimport { CXContext } from \"./cxContext\";\nimport * as dc from \"dc\";\nimport { css } from \"glamor\";\nimport { Header, Label, Icon, Popup } from \"semantic-ui-react\";\nimport { useWindowDimensions} from \"../util\";\n\nconst ResetButton = props => {\n    const style = css({\n        cursor: \"pointer\"\n    });\n    return (\n        <Label\n            {...style}\n            onClick={() => {\n                props.chart.filterAll();\n                dc.redrawAll();\n            }}\n        >\n            reset\n        </Label>\n    );\n};\nexport const ChartTemplate = props => {\n    const context = React.useContext(CXContext);\n    const [chart, updateChart] = React.useState(null);\n    const [chartData, updateChartData] = React.useState({'a':1, 'b':0});\n    let dims;\n    if (props.params.usedata === \"detail\") {\n        dims = context.dimensions;\n    } else if (props.params.usedata === \"deaths\") {\n        dims = context.dimensionsD;\n    }\n    const div = React.useRef(null);\n    const windowSize = useWindowDimensions()\n    React.useEffect(() => {\n        const newChart = props.chartFunction(div.current, dims, props.params, windowSize, chartData, updateChartData);\n\n        newChart.render();\n        updateChart(newChart);\n    }, [props.params, windowSize]);\n\n    let button;\n    let label;\n    if (props.reset) {\n        button = <ResetButton chart={chart} />;\n        label= <Popup content=\"Pick province(s) to filter results and click Reset to restore defaults\" trigger={<Label circular color='teal'>?</Label>}/>\n    }\n    let header;\n    if (props.title) {\n        header = (\n            <Header as=\"h3\">\n                {props.title}\n                {button}\n                {label}\n            </Header>\n        );\n    }\n\n    return (\n        <Fragment>\n            {header}\n            <div ref={div}></div>\n        </Fragment>\n    );\n};\n","import React from \"react\";\nimport * as dc from \"dc\";\nimport { ChartTemplate } from \"./chartTemplate\";\nimport { colorf, sortpc, population, totalReduce} from \"../util\";\n\nconst provinceChartFunc = (\n    divRef,\n    dimensions,\n    params,\n    windowSize,\n    chartData,\n    updateChartData\n) => {\n    const chartW0 = 350;\n    const chartH0 = 300;\n    if (chartData.hasOwnProperty(\"chart\")) {\n        const chart = chartData.chart;\n\n        const chartW = (windowSize.width / 1440) * chartW0;\n        const chartH = (windowSize.width / 1440) * chartH0;\n        chart.width(chartW).height(chartH);\n        return chart;\n    } else {\n        let dimension;\n        if (params.normalize) {\n            dimension = dimensions[\"provN\"];\n        } else {\n            dimension = dimensions[\"prov\"];\n        }\n        const group = dimension.group();\n        const colors = colorf();\n        const provinces = totalReduce(group).all()\n        sortpc(provinces, colors);\n        const provinceChart = dc.rowChart(divRef);\n        const normalize = params.normalize;\n        const chartW = (windowSize.width / 1440) * chartW0;\n        const chartH = (windowSize.width / 1440) * chartH0;\n        provinceChart\n            .width(chartW)\n            .height(chartH)\n            .margins({ top: 10, right: 50, bottom: 30, left: 40 })\n            .dimension(dimension)\n            .group(group)\n            .elasticX(true)\n            .labelOffsetX(-25)\n            .valueAccessor(x =>\n                normalize ? x.value / population[x.key] : x.value\n            )\n            .ordinalColors(\n                colors.slice(0, Object.keys(provinces).length).reverse()\n            );\n\n        provinceChart.xAxis().ticks(5);\n\n        updateChartData({ chart: provinceChart });\n        return provinceChart;\n    }\n};\n\nexport const ProvinceChart = props => {\n    return (\n        <ChartTemplate\n            chartFunction={provinceChartFunc}\n            title=\"Province Totals\"\n            reset={true}\n            params={props.params}\n        />\n    );\n};\n","import React from \"react\";\nimport * as dc from \"dc\";\nimport { ChartTemplate } from \"./chartTemplate\";\nimport { scaleTime } from \"d3\";\nimport moment from \"moment\";\nimport { colorf, sortpc, totalReduce, provinceTotalReduce } from \"../util\";\n\nconst timeChartFunc = (\n    divRef,\n    dimensions,\n    params,\n    windowSize,\n    chartData,\n    updateChartData\n) => {\n\n    const chartH0 = 350;\n    const chartW0 = 475;\n\n    if (chartData.hasOwnProperty(\"chart\")) {\n        const chart = chartData.chart;\n\n        const chartW = (windowSize.width / 1440) * chartW0;\n        const chartH = (windowSize.width / 1440) * chartH0;\n\n        chart.width(chartW).height(chartH);\n        return chart;\n    } else {\n        let dimension;\n        let pgroup;\n        let group;\n        if (params.normalize) {\n            dimension = dimensions[\"dateN\"];\n            pgroup = dimensions[\"provN\"].group();\n            group = dimension.group();\n        } else {\n            dimension = dimensions[\"date\"];\n            pgroup = dimensions[\"prov\"].group();\n            group = dimension.group();\n        }\n        const stack = params.stacked;\n        let chartGroup = group;\n        const colors = colorf();\n        if (stack) {\n            const pCounts = provinceTotalReduce(group);\n            function accumulate_group(source_group) {\n                return {\n                    all: function() {\n                        const sa = source_group.all();\n                        const cumulate = {};\n                        const res = [];\n                        for (const el of sa) {\n                            for (let [k, v] of Object.entries(el.value)) {\n                                cumulate[k] = (cumulate[k] || 0) + v;\n                            }\n                            res.push({ key: el.key, value: { ...cumulate } });\n                        }\n                        return res;\n                    }\n                };\n            }\n            const ag = accumulate_group(pCounts);\n            chartGroup = ag;\n        } else {\n            function accumulate_group(source_group) {\n                return {\n                    all: function() {\n                        const sa = source_group.all();\n                        let cumulate = 0;\n                        const res = [];\n                        for (const el of sa) {\n                            cumulate += el.value;\n                            res.push({ key: el.key, value: cumulate });\n                        }\n                        return res;\n                    }\n                };\n            }\n            const tCount = totalReduce(group);\n            chartGroup = accumulate_group(tCount);\n        }\n        const provinces = totalReduce(pgroup).all();\n        //sort provinces and colors together\n        sortpc(provinces, colors);\n        const smallestProvince = provinces[0].key;\n        const sel = i => {\n            return d => d.value[i] || 0;\n        };\n\n        const timeChart = dc.lineChart(divRef);\n\n        if (stack) {\n            timeChart\n                .dimension(dimension)\n                .group(chartGroup, smallestProvince, sel(smallestProvince));\n        } else {\n            timeChart.dimension(dimension).group(chartGroup);\n        }\n\n        const chartW = (windowSize.width / 1440) * chartW0;\n        const chartH = (windowSize.width / 1440) * chartH0;\n\n        timeChart\n            .renderArea(true)\n            .elasticY(true)\n            .width(chartW)\n            .height(chartH)\n            .brushOn(false)\n            .clipPadding(10)\n            .margins({ left: 40, top: 10, right: 10, bottom: 20 })\n            // .renderDataPoints({ radius: 0, fillOpacity: 1 })\n            .xyTipsOn(true)\n            .x(\n                scaleTime().domain([\n                    new Date(2020, 2, 1),\n                    moment().add(1, \"day\")\n                ])\n            )\n            .ordinalColors(colors)\n            .xAxis()\n            .ticks(8)\n            .tickFormat(v => moment(v).format(\"DD/MM\"));\n\n        if (stack) {\n            for (const p of provinces.slice(1)) {\n                const pk = p.key;\n                timeChart.stack(chartGroup, pk, sel(pk));\n            }\n        }\n        // console.log('update', updateChartData)\n        updateChartData({ 'chart': timeChart });\n        return timeChart;\n    }\n};\n\nexport const TimeChart = props => {\n    return (\n        <ChartTemplate\n            chartFunction={timeChartFunc}\n            title=\"Cumulative\"\n            params={props.params}\n        />\n    );\n};\n","import React from \"react\";\nimport * as dc from \"dc\";\nimport { ChartTemplate } from \"./chartTemplate\";\nimport { colorf, sortpc, totalReduce, provinceTotalReduce } from \"../util\";\n\nconst statNumberFunc = (divRef, dimensions, params) => {\n    const dimension = dimensions[\"date\"];\n    let group;\n    let getValue;\n    if (params.total) {\n        group = dimension.groupAll().reduceSum(x=>x.Total);\n        getValue = x => x;\n    } else {\n        group = totalReduce(dimension.group());\n        getValue = x => x.value;\n    }\n    const quarterChart = dc.numberDisplay(divRef);\n    quarterChart\n        .valueAccessor(getValue)\n        .ordering(x => x.key)\n        .group(group);\n    return quarterChart;\n};\n\nexport const StatNumber = props => {\n    return (\n        <ChartTemplate\n            chartFunction={statNumberFunc}\n            title=\"\"\n            params={props.params}\n        />\n    );\n};\n","import React from \"react\";\nimport * as dc from \"dc\";\nimport { ChartTemplate } from \"./chartTemplate\";\nimport { scaleTime } from \"d3\";\nimport moment from \"moment\";\nimport { colorf, sortpc, totalReduce, provinceTotalReduce } from \"../util\";\n\nconst dailyTimeChartFunc = (\n    divRef,\n    dimensions,\n    params,\n    windowSize,\n    chartData,\n    updateChartData\n) => {\n    const chartH0 = 350;\n    const chartW0 = 475;\n\n    if (chartData.hasOwnProperty(\"chart\")) {\n        const chart = chartData.chart;\n\n        const chartW = (windowSize.width / 1440) * chartW0;\n        const chartH = (windowSize.width / 1440) * chartH0;\n\n        chart.width(chartW).height(chartH);\n        return chart;\n    } else {\n        let dimension;\n        let pdim;\n        if (params.normalize) {\n            dimension = dimensions[\"dateN\"];\n            pdim = dimensions[\"provN\"];\n        } else {\n            dimension = dimensions[\"date\"];\n            pdim = dimensions[\"prov\"];\n        }\n        const group = dimension.group();\n        const stack = params.stacked;\n        let chartGroup = group;\n        const provincesG = totalReduce(pdim.group());\n        if (stack) {\n            const pCounts = provinceTotalReduce(group);\n            chartGroup = pCounts;\n        }\n        else{\n            chartGroup = totalReduce(group);\n        }\n        const sel = i => {\n            return d => d.value[i] || 0;\n        };\n\n        const colors = colorf();\n        const provinces = provincesG.all();\n        sortpc(provinces, colors);\n\n        const timeChart = dc.lineChart(divRef);\n\n        const smallestProvince = provinces[0].key;\n        if (stack) {\n            timeChart\n                .dimension(dimension)\n                .group(chartGroup, smallestProvince, sel(smallestProvince));\n        } else {\n            timeChart.dimension(dimension).group(chartGroup);\n        }\n\n        const chartW = (windowSize.width / 1440) * chartW0;\n        const chartH = (windowSize.width / 1440) * chartH0;\n        timeChart\n            .renderArea(true)\n            .elasticY(true)\n            .width(chartW)\n            .height(chartH)\n            .brushOn(false)\n            .clipPadding(10)\n            .margins({ left: 40, top: 10, right: 10, bottom: 20 })\n            // .renderDataPoints({ radius: 2, fillOpacity: 1 })\n            .ordinalColors(colors)\n            .x(\n                scaleTime().domain([\n                    new Date(2020, 2, 1),\n                    moment().add(1, \"day\")\n                ])\n            )\n            .xAxis()\n            .ticks(5)\n            .tickFormat(v => moment(v).format(\"DD/MM\"));\n\n        if (stack) {\n            for (const p of provinces.slice(1)) {\n                const pk = p.key;\n                timeChart.stack(chartGroup, pk, sel(pk));\n            }\n        }\n\n        updateChartData({ 'chart': timeChart });\n        return timeChart;\n    }\n};\n\nexport const DailyTimeChart = props => {\n    return (\n        <ChartTemplate\n            chartFunction={dailyTimeChartFunc}\n            title=\"Daily\"\n            params={props.params}\n        />\n    );\n};\n","import React from \"react\";\nimport * as dc from \"dc\";\nimport { ChartTemplate } from \"./chartTemplate\";\nimport { scaleTime } from \"d3\";\nimport moment from \"moment\";\nimport { colorf, sortpc, population } from \"../util\";\n\nconst timeChartFunc = (divRef, dimensions, params, windowSize, chartData, updateChartData) => {\n    const chartH0 = 350;\n    const chartW0 = 475;\n\n    if (chartData.hasOwnProperty(\"chart\")) {\n        const chart = chartData.chart;\n\n        const chartW = (windowSize.width / 1440) * chartW0;\n        const chartH = (windowSize.width / 1440) * chartH0;\n\n        chart.width(chartW).height(chartH);\n        return chart;\n    } else {\n    let dimension;\n    let pdim;\n    if(params.normalize){\n        dimension = dimensions['dateN'];\n        pdim = dimensions['provN'];\n    }\n    else{\n        dimension = dimensions['date'];\n        pdim = dimensions['prov'];\n    }\n    const group = dimension.group();\n    let chartGroup = group;\n    const colors = colorf();\n    const pCounts = group.reduce(\n        (p, v) => {\n            p[v.Prov] = (p[v.Prov] || 0) + v.Total / population[v.Prov];\n            return p;\n        },\n        (p, v) => {\n            p[v.Prov] = p[v.Prov] - v.Total / population[v.Prov];\n            return p;\n        },\n        () => ({})\n    );\n    function accumulate_group(source_group) {\n        return {\n            all: function() {\n                const sa = source_group.all();\n                const cumulate = {};\n                const res = [];\n                for (const el of sa) {\n                    for (let [k, v] of Object.entries(el.value)) {\n                        cumulate[k] = (cumulate[k] || 0) + v;\n                    }\n                    res.push({ key: el.key, value: { ...cumulate } });\n                }\n                return res;\n            }\n        };\n    }\n    const ag = accumulate_group(pCounts);\n    chartGroup = ag;\n    const provinces = pdim.group().all();\n    //sort provinces and colors together\n    sortpc(provinces, colors);\n    const smallestProvince = provinces[0].key;\n    const sel = i => {\n        return d => d.value[i] || 0;\n    };\n\n    const timeChart = dc.compositeChart(divRef);\n\n    const charts = [];\n\n    // for(const p of provinces) {\n    // for(let i of provinces) {\n    provinces.forEach((el, ix) => {\n        const pk = el.key;\n        const color = colors[ix];\n        charts.push(\n            dc\n                .lineChart(timeChart)\n                .dimension(dimension)\n                .group(chartGroup, pk, sel(pk))\n                .colors(color)\n            // .renderDataPoints({ radius: 2, fillOpacity: 1 })\n        );\n    });\n    \n    const    chartW = windowSize.width/1440 * chartW0;\n    const    chartH = windowSize.width/1440 * chartH0;\n    timeChart\n        // .renderArea(true)\n        .elasticY(true)\n        .width(chartW)\n        .height(chartH)\n        .brushOn(false)\n        .clipPadding(10)\n        .margins({ left: 50, top: 10, right: 10, bottom: 20 })\n        .x(scaleTime().domain([new Date(2020, 2, 1), moment().add(1, \"day\")]))\n        .compose(charts);\n\n    timeChart\n        .xAxis()\n        .ticks(5)\n        .tickFormat(v => moment(v).format(\"DD/MM\"));\n\n    updateChartData({ 'chart': timeChart });\n    return timeChart;\n}\n};\n\nexport const NormalizedChart = props => {\n    return (\n        <ChartTemplate chartFunction={timeChartFunc} params={props.params} />\n    );\n};\n","import React, { Fragment } from \"react\";\nimport { CXContext } from \"./cxContext\";\nimport moment from \"moment\";\n\nexport const LastDateDisplay = props => {\n    const context = React.useContext(CXContext);\n    let dimension;\n    if (props.params.usedata === \"detail\") {\n        dimension = context.dimensions['date'];\n    } else if (props.params.usedata === \"deaths\") {\n        dimension = context.dimensionsD['date'];\n    }\n    // const dimension = cf.dimension(d => d.Date);\n    const group = dimension.group();\n    const vals = group.all();\n    const last = moment.max(vals.map(x => x.key)).format(\"D-MMM\");\n\n    return <Fragment>{last}</Fragment>;\n};\n","import React from \"react\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nimport { ProvinceChart } from \"./provinceChart\";\nimport { TimeChart } from \"./timeChart\";\nimport { StatNumber } from \"./statNumber\";\nimport { DailyTimeChart } from \"./dailyTimeChart\";\nimport { NormalizedChart } from \"./normalizedChart\";\nimport { LastDateDisplay } from \"./textDisplay\";\nimport DataContext from \"./cxContext\";\nimport {\n    Grid,\n    Tab,\n    Segment,\n    Label,\n    Statistic,\n    StatisticValue,\n    StatisticLabel,\n    GridRow,\n    Header,\n    HeaderContent,\n    Icon\n} from \"semantic-ui-react\";\n\nexport const Dashboard = props => {\n    const panes_cumulative = [\n        {\n            menuItem: \"Stacked\",\n            pane: (\n                <Tab.Pane attached=\"top\" key={1}>\n                    <TimeChart params={{ stacked: true, usedata: \"detail\" }} />\n                </Tab.Pane>\n            )\n        },\n        {\n            menuItem: \"Total\",\n            pane: (\n                <Tab.Pane attached=\"top\" key={2}>\n                    <TimeChart params={{ stacked: false, usedata: \"detail\" }} />\n                </Tab.Pane>\n            )\n        }\n    ];\n    const panes_daily = [\n        {\n            menuItem: \"Stacked\",\n            pane: (\n                <Tab.Pane attached=\"top\" key={3}>\n                    <DailyTimeChart\n                        params={{ stacked: true, usedata: \"detail\" }}\n                    />\n                </Tab.Pane>\n            )\n        },\n        {\n            menuItem: \"Total\",\n            pane: (\n                <Tab.Pane attached=\"top\" key={4}>\n                    <DailyTimeChart\n                        params={{ stacked: false, usedata: \"detail\" }}\n                    />\n                </Tab.Pane>\n            )\n        }\n    ];\n\n    const cases = (\n        <Grid>\n            <Grid.Row columns={16}>\n                {/* <GenderChart/>\n            <AgeChart/> */}\n                <Grid.Column width={4}>\n                    {/* <Checkbox toggle label=\"Normalize to population\"></Checkbox> */}\n                    <Grid>\n                        <GridRow centered columns={1}>\n                            <Grid.Column width={6}>\n                                <Statistic centered size=\"small\">\n                                    <StatisticValue>\n                                        <StatNumber\n                                            params={{\n                                                usedata: \"detail\",\n                                                total: true\n                                            }}\n                                        />\n                                    </StatisticValue>\n                                    <StatisticLabel>Total cases</StatisticLabel>\n                                </Statistic>\n                            </Grid.Column>\n                            <Grid.Column width={6}>\n                                <Statistic size=\"small\">\n                                    <StatisticValue>\n                                        <StatNumber\n                                            params={{\n                                                usedata: \"detail\",\n                                                total: false,\n                                                date: true\n                                            }}\n                                        />\n                                    </StatisticValue>\n                                    <StatisticLabel>New cases</StatisticLabel>\n                                    <StatisticLabel>\n                                        On{\" \"}\n                                        <LastDateDisplay\n                                            params={{ usedata: \"detail\" }}\n                                        />\n                                    </StatisticLabel>\n                                </Statistic>\n                            </Grid.Column>\n                        </GridRow>\n\n                        <Grid.Column width={16}>\n                            <Segment>\n                                <ProvinceChart params={{ usedata: \"detail\" }} />\n                            </Segment>\n                        </Grid.Column>\n                    </Grid>\n                    {/* </Grid> */}\n                </Grid.Column>\n                <Grid.Column width={6}>\n                    <Tab\n                        menu={{ secondary: true, pointing: true }}\n                        panes={panes_cumulative}\n                        renderActiveOnly={false}\n                    />\n                </Grid.Column>\n                <Grid.Column width={6}>\n                    <Tab\n                        menu={{ secondary: true, pointing: true }}\n                        panes={panes_daily}\n                        renderActiveOnly={false}\n                    />\n                    {/* <DailyTimeChart params={{usedata:'detail'}}/> */}\n                </Grid.Column>\n            </Grid.Row>\n            <Grid.Row columns={2}>\n                <Grid.Column>{/* <OriginChart/> */}</Grid.Column>\n            </Grid.Row>\n        </Grid>\n    );\n    const panes_cumulative_d = [\n        {\n            menuItem: \"Stacked\",\n            pane: (\n                <Tab.Pane attached=\"top\" key={11}>\n                    <TimeChart params={{ stacked: true, usedata: \"deaths\" }} />\n                </Tab.Pane>\n            )\n        },\n        {\n            menuItem: \"Total\",\n            pane: (\n                <Tab.Pane attached=\"top\" key={12}>\n                    <TimeChart params={{ stacked: false, usedata: \"deaths\" }} />\n                </Tab.Pane>\n            )\n        }\n    ];\n    const panes_daily_d = [\n        {\n            menuItem: \"Stacked\",\n            pane: (\n                <Tab.Pane attached=\"top\" key={13}>\n                    <DailyTimeChart\n                        params={{ stacked: true, usedata: \"deaths\" }}\n                    />\n                </Tab.Pane>\n            )\n        },\n        {\n            menuItem: \"Total\",\n            pane: (\n                <Tab.Pane attached=\"top\" key={14}>\n                    <DailyTimeChart\n                        params={{ stacked: false, usedata: \"deaths\" }}\n                    />\n                </Tab.Pane>\n            )\n        }\n    ];\n    const deaths = (\n        <Grid>\n            <Grid.Row columns={16}>\n                {/* <GenderChart/>\n            <AgeChart/> */}\n                <Grid.Column width={4}>\n                    <Grid>\n                        <GridRow centered columns={3}>\n                            <Grid.Column width={6}>\n                                <Statistic size=\"small\">\n                                    <StatisticValue>\n                                        <StatNumber\n                                            params={{\n                                                usedata: \"deaths\",\n                                                total: true\n                                            }}\n                                        />\n                                    </StatisticValue>\n                                    <StatisticLabel>\n                                        Total casualties\n                                    </StatisticLabel>\n                                </Statistic>\n                            </Grid.Column>\n                            <Grid.Column width={6}>\n                                <Statistic size=\"small\">\n                                    <StatisticValue>\n                                        <StatNumber\n                                            params={{\n                                                usedata: \"deaths\",\n                                                total: false,\n                                                date: true\n                                            }}\n                                        />\n                                    </StatisticValue>\n                                    <StatisticLabel>New casualties</StatisticLabel>\n                                    <StatisticLabel>\n                                        On{\" \"}\n                                        <LastDateDisplay\n                                            params={{ usedata: \"deaths\" }}\n                                        />\n                                    </StatisticLabel>\n                                </Statistic>\n                            </Grid.Column>\n                        </GridRow>\n                        <Grid.Column width={16}>\n                            <Segment>\n                                <ProvinceChart params={{ usedata: \"deaths\" }} />\n                            </Segment>\n                        </Grid.Column>\n                    </Grid>\n                </Grid.Column>\n                <Grid.Column width={6}>\n                    <Tab\n                        menu={{ secondary: true, pointing: true }}\n                        panes={panes_cumulative_d}\n                        renderActiveOnly={false}\n                    />\n                </Grid.Column>\n                <Grid.Column width={6}>\n                    <Tab\n                        menu={{ secondary: true, pointing: true }}\n                        panes={panes_daily_d}\n                        renderActiveOnly={false}\n                    />\n                    {/* <DailyTimeChart params={{usedata:'detail'}}/> */}\n                </Grid.Column>\n            </Grid.Row>\n            <Grid.Row columns={2}>\n                <Grid.Column>{/* <OriginChart/> */}</Grid.Column>\n            </Grid.Row>\n        </Grid>\n    );\n\n    const normalized = (\n        <Grid>\n            <GridRow centered>\n                {/* <Grid.Column width={10}> */}\n                <Header as=\"h2\">CASES PER 1M</Header>\n                {/* </Grid.Column> */}\n            </GridRow>\n            <Grid.Row centered columns={5}>\n                <Grid.Column width={4}>\n                    <Segment>\n                        <ProvinceChart\n                            params={{ usedata: \"detail\", normalize: true }}\n                        />\n                    </Segment>\n                </Grid.Column>\n                <Grid.Column width={6}>\n                    <Segment>\n                        <NormalizedChart\n                            params={{ usedata: \"detail\", normalize: true }}\n                        />\n                    </Segment>\n                </Grid.Column>\n            </Grid.Row>\n        </Grid>\n    );\n    const normalizedd = (\n        <Grid>\n            <GridRow centered>\n                {/* <Grid.Column width={10}> */}\n                <Header as=\"h2\">CASUALTIES PER 1M</Header>\n                {/* </Grid.Column> */}\n            </GridRow>\n            <Grid.Row centered columns={5}>\n                <Grid.Column width={4}>\n                    <Segment>\n                        <ProvinceChart\n                            params={{ usedata: \"deaths\", normalize: true }}\n                        />\n                    </Segment>\n                </Grid.Column>\n                <Grid.Column width={6}>\n                    <Segment>\n                        <NormalizedChart\n                            params={{ usedata: \"deaths\", normalize: true }}\n                        />\n                    </Segment>\n                </Grid.Column>\n            </Grid.Row>\n        </Grid>\n    );\n    const panes = [\n        {\n            menuItem: \"Positive cases\",\n            pane: (\n                <Tab.Pane attached=\"top\" key={1}>\n                    {cases}\n                </Tab.Pane>\n            )\n        },\n        {\n            menuItem: \"Casualties\",\n            pane: (\n                <Tab.Pane attached=\"top\" key={2}>\n                    {deaths}\n                </Tab.Pane>\n            )\n        },\n        {\n            menuItem: \"Cases per million\",\n            pane: (\n                <Tab.Pane attached=\"top\" key={3}>\n                    {normalized}\n                </Tab.Pane>\n            )\n        },\n        {\n            menuItem: \"Casualties per million\",\n            pane: (\n                <Tab.Pane attached=\"top\" key={4}>\n                    {normalizedd}\n                </Tab.Pane>\n            )\n        }\n    ];\n    return (\n        <div>\n            <DataContext>\n                <Segment color=\"black\" inverted>\n                    <Header color=\"yellow\" id=\"title\" textAlign=\"center\">\n                        <Icon name=\"heartbeat\" />\n                        Canada Covid-19 data visualization\n                    </Header>\n                </Segment>\n                <Segment>\n                    <Tab\n                        menu={{ secondary: true, pointing: true }}\n                        panes={panes}\n                        renderActiveOnly={false}\n                    />\n                </Segment>\n                <Segment color=\"orange\">\n                    Data source:{\" \"}\n                    <a href=\"https://virihealth.com/\">ViriHealth</a>\n                </Segment>\n            </DataContext>\n        </div>\n    );\n};\n","import React from 'react';\nimport './App.css';\n// import Plot from \"./components/plot\"\nimport { Dashboard } from \"./components/dashboard\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Dashboard/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["components/cxContext.js","components/chartTemplate.js","util.js","components/provinceChart.js","components/timeChart.js","components/statNumber.js","components/dailyTimeChart.js","components/normalizedChart.js","components/textDisplay.js","components/dashboard.js","App.js","serviceWorker.js","index.js"],"names":["CXContext","React","createContext","DataContext","state","detailData","deathData","loading","hasCF","this","setState","csv","then","data","forEach","d","Date","moment","filter","x","Prov","cf","crossfilter","clonedData","JSON","parse","stringify","cfn","cfd","cfdn","Provider","value","ref","parent","props","children","Component","ResetButton","style","css","cursor","Label","onClick","chart","filterAll","dc","ChartTemplate","context","useContext","useState","updateChart","params","usedata","normalize","button","header","div","useRef","useEffect","newChart","chartFunction","current","render","reset","title","Header","as","colorf","map","rgb","darker","formatHex","sortpc","provinces","colors","merged","i","length","push","a1","a2","sort","y","population","ON","QC","BC","AB","SK","NL","NS","MB","NB","PE","YT","NT","NU","provinceChartFunc","divRef","dimension","group","all","provinceChart","width","height","margins","top","right","bottom","left","elasticX","labelOffsetX","valueAccessor","key","ordinalColors","slice","Object","keys","reverse","xAxis","ticks","ProvinceChart","timeChartFunc","stack","stacked","chartGroup","accumulate_group","source_group","sa","cumulate","res","el","entries","k","v","reduce","p","smallestProvince","sel","timeChart","renderArea","elasticY","brushOn","clipPadding","renderDataPoints","radius","fillOpacity","xyTipsOn","scaleTime","domain","add","tickFormat","format","pk","TimeChart","statNumberFunc","getValue","total","groupAll","quarterChart","ordering","StatNumber","dailyTimeChartFunc","DailyTimeChart","pCounts","ag","charts","ix","color","compose","NormalizedChart","LastDateDisplay","vals","last","max","Dashboard","panes_cumulative","menuItem","pane","Tab","Pane","attached","panes_daily","cases","Grid","Row","columns","Column","GridRow","centered","Statistic","size","StatisticValue","StatisticLabel","date","Segment","menu","secondary","pointing","panes","renderActiveOnly","panes_cumulative_d","panes_daily_d","deaths","normalized","normalizedd","inverted","id","textAlign","Icon","name","href","App","className","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e5aaf524.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"dc/dist/style/dc.css\";\nimport { csv } from \"d3-fetch\";\nimport moment from \"moment\";\nimport * as crossfilter from \"crossfilter\";\nexport const CXContext = React.createContext(\"CXContext\");\n\nexport default class DataContext extends Component {\n    state = {\n        detailData: null,\n        deathData: null,\n        loading: false,\n        hasCF: false\n    };\n    componentDidMount() {\n        if (this.state.hasCF) {\n            return;\n        }\n        if (this.state.loading) {\n            return;\n        }\n        const dateFormat = \"D-MMM-YYYY\";\n        const url =\n            \"https://docs.google.com/spreadsheets/d/1C59nxtgcnwGyo6lgypsgN18duxmwWigjeVdKY58t0mU/gviz/tq?tqx=out:csv&sheet=Detail\";\n        const url2 =\n            \"https://docs.google.com/spreadsheets/d/1C59nxtgcnwGyo6lgypsgN18duxmwWigjeVdKY58t0mU/gviz/tq?tqx=out:csv&sheet=Dth\";\n        this.setState({ loading: true });\n        csv(url)\n            .then(data => {\n                data.forEach(d => {\n                    d.Date = moment(d.Date + \"-2020\", dateFormat);\n                });\n                data = data.filter(x => x.Prov !== \"RC\");\n                this.cf = crossfilter(data);\n                const clonedData = JSON.parse(JSON.stringify(data));\n                clonedData.forEach(x => {\n                    x.Date = moment(x.Date);\n                });\n                this.cfn = crossfilter(clonedData);\n                this.setState({ detailData: data });\n            })\n            .then(() =>\n                csv(url2).then(data => {\n                    data.forEach(d => {\n                        d.Date = moment(d[\"Announced\\n\"] + \"-2020\", dateFormat);\n                    });\n                    data = data.filter(x => x.Prov !== \"RC\");\n                    this.cfd = crossfilter(data);\n                    const clonedData = JSON.parse(JSON.stringify(data));\n                    clonedData.forEach(x => {\n                        x.Date = moment(x.Date);\n                    });\n                    this.cfdn = crossfilter(clonedData);\n                    this.setState({\n                        loading: false,\n                        hasCF: true,\n                        deathData: data\n                    });\n                })\n            );\n    }\n    render() {\n        if (!this.state.hasCF) {\n            return null;\n        }\n        return (\n            <CXContext.Provider\n                value={{\n                    cf: this.cf,\n                    cfd: this.cfd,\n                    cfn: this.cfn,\n                    cfdn: this.cfdn\n                }}\n            >\n                <div ref={this.parent}>{this.props.children}</div>\n            </CXContext.Provider>\n        );\n    }\n}\n","import React, { Fragment } from \"react\";\nimport { CXContext } from \"./cxContext\";\nimport * as dc from \"dc\";\nimport { css } from \"glamor\";\nimport { Header, Label } from \"semantic-ui-react\";\n\nconst ResetButton = props => {\n    const style = css({\n        cursor: \"pointer\"\n    });\n    return (\n        <Label\n            {...style}\n            onClick={() => {\n                props.chart.filterAll();\n                dc.redrawAll();\n            }}\n        >\n            reset\n        </Label>\n    );\n};\nexport const ChartTemplate = props => {\n    const context = React.useContext(CXContext);\n    const [chart, updateChart] = React.useState(null);\n    let cf;\n    if (props.params.usedata === \"detail\") {\n        cf = context.cf;\n        if (props.params.normalize) {\n            cf = context.cfn;\n        }\n    } else if (props.params.usedata === \"deaths\") {\n        cf = context.cfd;\n        if (props.params.normalize) {\n            cf = context.cfdn;\n        }\n    }\n    const div = React.useRef(null);\n    React.useEffect(() => {\n        const newChart = props.chartFunction(div.current, cf, props.params);\n\n        newChart.render();\n        updateChart(newChart);\n    }, [props.params]);\n\n    let button;\n    if (props.reset) {\n        button = <ResetButton chart={chart} />;\n    }\n    let header;\n    if (props.title) {\n        header = (\n            <Header as=\"h3\">\n                {props.title}\n                {button}\n            </Header>\n        );\n    }\n    return (\n        <Fragment>\n            {header}\n            <div ref={div}></div>\n        </Fragment>\n    );\n};\n","import { rgb } from \"d3-color\";\n\nexport const colorf = () => {\n    //http://tsitsul.in/blog/coloropt/\n    const cols = [\n        [235, 172, 35],\n        [184, 0, 88],\n        [0, 140, 249],\n        [0, 110, 0],\n        [0, 187, 173],\n        [209, 99, 230],\n        [178, 69, 2],\n        [255, 146, 135],\n        [89, 84, 214],\n        [0, 198, 248],\n        [135, 133, 0],\n        [0, 167, 108],\n        [189, 189, 189]\n    ];\n    return cols.map(x =>\n        rgb(x[0], x[1], x[2])\n            .darker()\n            .formatHex()\n    );\n};\n\nexport const sortpc = (provinces, colors) => {\n    const merged = [];\n    for (let i = 0; i < provinces.length; i++) {\n        merged.push({ a1: provinces[i], a2: colors[i] });\n    }\n    merged.sort((x, y) => x.a1.value - y.a1.value);\n    for (let i = 0; i < merged.length; i++) {\n        provinces[i] = merged[i].a1;\n        colors[i] = merged[i].a2;\n    }\n    // console.log(provinces, colors);\n};\n\nexport const population = {\n    ON: 14.71,\n    QC: 8.53,\n    BC: 5.11,\n    AB: 4.41,\n    SK: 1.18,\n    NL: 0.52,\n    NS: 0.98,\n    MB: 1.38,\n    NB: 0.78,\n    PE: 0.16,\n    YT: 0.041,\n    NT: 0.044,\n    NU: 0.039\n};\n","import React from \"react\";\nimport * as dc from \"dc\";\nimport { ChartTemplate } from \"./chartTemplate\";\nimport { colorf, sortpc, population } from \"../util\";\n\nconst provinceChartFunc = (divRef, cf, params) => {\n    const dimension = cf.dimension(d => d.Prov);\n    const group = dimension.group();\n\n    const colors = colorf();\n    const provinces = group.all();\n    sortpc(provinces, colors);\n    const provinceChart = dc.rowChart(divRef);\n    const normalize = params.normalize;\n    provinceChart\n        .width(350)\n        .height(300)\n        .margins({ top: 10, right: 50, bottom: 30, left: 40 })\n        .dimension(dimension)\n        .group(group)\n        .elasticX(true)\n        .labelOffsetX(-25)\n        .valueAccessor(x => (normalize ? x.value / population[x.key] : x.value))\n        .ordinalColors(\n            colors.slice(0, Object.keys(provinces).length).reverse()\n        );\n\n    provinceChart.xAxis().ticks(5);\n    return provinceChart;\n};\n\nexport const ProvinceChart = props => {\n    return (\n        <ChartTemplate\n            chartFunction={provinceChartFunc}\n            title=\"Province Totals\"\n            reset={true}\n            params={props.params}\n        />\n    );\n};\n","import React from \"react\";\nimport * as dc from \"dc\";\nimport { ChartTemplate } from \"./chartTemplate\";\nimport { scaleTime } from \"d3\";\nimport moment from \"moment\";\nimport { colorf, sortpc } from \"../util\";\n\nconst timeChartFunc = (divRef, cf, params) => {\n    const dimension = cf.dimension(d => d.Date);\n    const group = dimension.group();\n    const stack = params.stacked;\n    let chartGroup = group;\n    const colors = colorf();\n    if (stack) {\n        const pCounts = group.reduce(\n            (p, v) => {\n                p[v.Prov] = (p[v.Prov] || 0) + 1;\n                return p;\n            },\n            (p, v) => {\n                p[v.Prov] = p[v.Prov] - 1;\n                return p;\n            },\n            () => ({})\n        );\n        function accumulate_group(source_group) {\n            return {\n                all: function() {\n                    const sa = source_group.all();\n                    const cumulate = {};\n                    const res = [];\n                    for (const el of sa) {\n                        for (let [k, v] of Object.entries(el.value)) {\n                            cumulate[k] = (cumulate[k] || 0) + v;\n                        }\n                        res.push({ key: el.key, value: { ...cumulate } });\n                    }\n                    return res;\n                }\n            };\n        }\n        const ag = accumulate_group(pCounts);\n        chartGroup = ag;\n    } else {\n        function accumulate_group(source_group) {\n            return {\n                all: function() {\n                    const sa = source_group.all();\n                    let cumulate = 0;\n                    const res = [];\n                    for (const el of sa) {\n                        cumulate += el.value;\n                        res.push({ key: el.key, value: cumulate });\n                    }\n                    return res;\n                }\n            };\n        }\n        chartGroup = accumulate_group(group);\n    }\n    const pdim = cf.dimension(d => d.Prov);\n    const provinces = pdim.group().all();\n    //sort provinces and colors together\n    sortpc(provinces, colors);\n    const smallestProvince = provinces[0].key;\n    const sel = i => {\n        return d => d.value[i] || 0;\n    };\n\n    const timeChart = dc.lineChart(divRef);\n\n    if (stack) {\n        timeChart\n            .dimension(dimension)\n            .group(chartGroup, smallestProvince, sel(smallestProvince));\n    } else {\n        timeChart.dimension(dimension).group(chartGroup);\n    }\n\n    timeChart\n        .renderArea(true)\n        .elasticY(true)\n        .width(475)\n        .height(350)\n        .brushOn(false)\n        .clipPadding(10)\n        .margins({ left: 50, top: 10, right: 10, bottom: 20 })\n        .renderDataPoints({ radius: 2, fillOpacity: 1 })\n        .xyTipsOn(true)\n        .x(scaleTime().domain([new Date(2020, 2, 1), moment().add(1, \"day\")]))\n        .ordinalColors(colors)\n        .xAxis()\n        .ticks(8)\n        .tickFormat(v => moment(v).format(\"DD/MM\"));\n\n    if (stack) {\n        for (const p of provinces.slice(1)) {\n            const pk = p.key;\n            timeChart.stack(chartGroup, pk, sel(pk));\n        }\n    }\n\n    return timeChart;\n};\n\nexport const TimeChart = props => {\n    return (\n        <ChartTemplate\n            chartFunction={timeChartFunc}\n            title=\"Cumulative\"\n            params={props.params}\n        />\n    );\n};\n","import React from \"react\";\nimport * as dc from \"dc\";\nimport { ChartTemplate } from \"./chartTemplate\";\n\nconst statNumberFunc = (divRef, cf, params) => {\n    const dimension = cf.dimension(d => d.Date);\n    let group\n    let getValue\n    if(params.total){\n        group = dimension.groupAll();\n        getValue = x=>x;\n    }\n    else{\n        group = dimension.group()\n        getValue = x=>x.value;\n    }\n    const quarterChart = dc.numberDisplay(divRef);\n    quarterChart\n    .valueAccessor(getValue)\n    .ordering(x=>x.key)\n    .group(group);\n    return quarterChart\n}\n\nexport const StatNumber = props => {\n    return <ChartTemplate chartFunction={statNumberFunc} title=\"\" params={props.params}/>\n}","import React from \"react\";\nimport * as dc from \"dc\";\nimport { ChartTemplate } from \"./chartTemplate\";\nimport { scaleTime } from \"d3\";\nimport moment from \"moment\";\nimport { colorf, sortpc } from \"../util\";\n\nconst dailyTimeChartFunc = (divRef, cf, params) => {\n    const dimension = cf.dimension(d => d.Date);\n    const group = dimension.group();\n    const stack = params.stacked;\n    let chartGroup = group;\n    if (stack) {\n        const pCounts = group.reduce(\n            (p, v) => {\n                p[v.Prov] = (p[v.Prov] || 0) + 1;\n                return p;\n            },\n            (p, v) => {\n                p[v.Prov] = (p[v.Prov] || 0) - 1;\n                return p;\n            },\n            () => ({})\n        );\n        chartGroup = pCounts;\n    }\n    const pdim = cf.dimension(d => d.Prov);\n    const provinces = pdim.group().all();\n    const sel = i => {\n        return d => d.value[i] || 0;\n    };\n\n    const colors = colorf();\n    sortpc(provinces, colors);\n\n    const timeChart = dc.lineChart(divRef);\n\n    const smallestProvince = provinces[0].key;\n    if (stack) {\n        timeChart\n            .dimension(dimension)\n            .group(chartGroup, smallestProvince, sel(smallestProvince));\n    } else {\n        timeChart.dimension(dimension).group(chartGroup);\n    }\n    timeChart\n        .renderArea(true)\n        .elasticY(true)\n        .width(475)\n        .height(350)\n        .brushOn(false)\n        .clipPadding(10)\n        .margins({ left: 50, top: 10, right: 10, bottom: 20 })\n        .renderDataPoints({ radius: 2, fillOpacity: 1 })\n        .ordinalColors(colors)\n        .x(scaleTime().domain([new Date(2020, 2, 1), moment().add(1, \"day\")]))\n        .xAxis()\n        .ticks(5)\n        .tickFormat(v => moment(v).format(\"DD/MM\"));\n\n    if (stack) {\n        for (const p of provinces.slice(1)) {\n            const pk = p.key;\n            timeChart.stack(chartGroup, pk, sel(pk));\n        }\n    }\n\n    return timeChart;\n};\n\nexport const DailyTimeChart = props => {\n    return (\n        <ChartTemplate\n            chartFunction={dailyTimeChartFunc}\n            title=\"Daily\"\n            params={props.params}\n        />\n    );\n};\n","import React from \"react\";\nimport * as dc from \"dc\";\nimport { ChartTemplate } from \"./chartTemplate\";\nimport { scaleTime } from \"d3\";\nimport moment from \"moment\";\nimport { colorf, sortpc, population } from \"../util\";\n\nconst timeChartFunc = (divRef, cf, params) => {\n    const dimension = cf.dimension(d => d.Date);\n    const group = dimension.group();\n    let chartGroup = group;\n    const colors = colorf();\n    const pCounts = group.reduce(\n        (p, v) => {\n            p[v.Prov] = (p[v.Prov] || 0) + 1 / population[v.Prov];\n            return p;\n        },\n        (p, v) => {\n            p[v.Prov] = p[v.Prov] - 1 / population[v.Prov];\n            return p;\n        },\n        () => ({})\n    );\n    function accumulate_group(source_group) {\n        return {\n            all: function() {\n                const sa = source_group.all();\n                const cumulate = {};\n                const res = [];\n                for (const el of sa) {\n                    for (let [k, v] of Object.entries(el.value)) {\n                        cumulate[k] = (cumulate[k] || 0) + v;\n                    }\n                    res.push({ key: el.key, value: { ...cumulate } });\n                }\n                return res;\n            }\n        };\n    }\n    const ag = accumulate_group(pCounts);\n    chartGroup = ag;\n    const pdim = cf.dimension(d => d.Prov);\n    const provinces = pdim.group().all();\n    //sort provinces and colors together\n    sortpc(provinces, colors);\n    const smallestProvince = provinces[0].key;\n    const sel = i => {\n        return d => d.value[i] || 0;\n    };\n\n    const timeChart = dc.compositeChart(divRef);\n\n    const charts = [];\n\n    // for(const p of provinces) {\n    // for(let i of provinces) {\n    provinces.forEach((el, ix) => {\n        const pk = el.key;\n        const color = colors[ix];\n        charts.push(\n            dc\n                .lineChart(timeChart)\n                .dimension(dimension)\n                .group(chartGroup, pk, sel(pk))\n                .colors(color)\n            // .renderDataPoints({ radius: 2, fillOpacity: 1 })\n        );\n    });\n\n    timeChart\n        // .renderArea(true)\n        .elasticY(true)\n        .width(475)\n        .height(350)\n        .brushOn(false)\n        .clipPadding(10)\n        .margins({ left: 50, top: 10, right: 10, bottom: 20 })\n        .x(scaleTime().domain([new Date(2020, 2, 1), moment().add(1, \"day\")]))\n        .compose(charts);\n\n    timeChart\n        .xAxis()\n        .ticks(5)\n        .tickFormat(v => moment(v).format(\"DD/MM\"));\n\n    return timeChart;\n};\n\nexport const NormalizedChart = props => {\n    return (\n        <ChartTemplate chartFunction={timeChartFunc} params={props.params} />\n    );\n};\n","import React, { Fragment } from \"react\";\nimport { CXContext } from \"./cxContext\";\nimport moment from \"moment\";\n\nexport const LastDateDisplay = props => {\n    const context = React.useContext(CXContext);\n    let cf;\n    if (props.params.usedata === \"detail\") {\n        cf = context.cf;\n    } else if (props.params.usedata === \"deaths\") {\n        cf = context.cfd;\n    }\n    const dimension = cf.dimension(d => d.Date);\n    const group = dimension.group();\n    const vals = group.all();\n    const last = moment.max(vals.map(x => x.key)).format(\"D-MMM\");\n\n    return <Fragment>{last}</Fragment>;\n};\n","import React from \"react\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nimport { ProvinceChart } from \"./provinceChart\";\nimport { TimeChart } from \"./timeChart\";\nimport { StatNumber } from \"./statNumber\";\nimport { DailyTimeChart } from \"./dailyTimeChart\";\nimport { NormalizedChart } from \"./normalizedChart\";\nimport { LastDateDisplay } from \"./textDisplay\";\nimport DataContext from \"./cxContext\";\nimport {\n    Grid,\n    Tab,\n    Segment,\n    Label,\n    Statistic,\n    StatisticValue,\n    StatisticLabel,\n    GridRow,\n    Header,\n    HeaderContent,\n    Icon\n} from \"semantic-ui-react\";\n\nexport const Dashboard = props => {\n    const panes_cumulative = [\n        {\n            menuItem: \"Stacked\",\n            pane: (\n                <Tab.Pane attached=\"top\" key={1}>\n                    <TimeChart params={{ stacked: true, usedata: \"detail\" }} />\n                </Tab.Pane>\n            )\n        },\n        {\n            menuItem: \"Total\",\n            pane: (\n                <Tab.Pane attached=\"top\" key={2}>\n                    <TimeChart params={{ stacked: false, usedata: \"detail\" }} />\n                </Tab.Pane>\n            )\n        }\n    ];\n    const panes_daily = [\n        {\n            menuItem: \"Stacked\",\n            pane: (\n                <Tab.Pane attached=\"top\" key={3}>\n                    <DailyTimeChart\n                        params={{ stacked: true, usedata: \"detail\" }}\n                    />\n                </Tab.Pane>\n            )\n        },\n        {\n            menuItem: \"Total\",\n            pane: (\n                <Tab.Pane attached=\"top\" key={4}>\n                    <DailyTimeChart\n                        params={{ stacked: false, usedata: \"detail\" }}\n                    />\n                </Tab.Pane>\n            )\n        }\n    ];\n\n    const cases = (\n        <Grid>\n            <Grid.Row columns={16}>\n                {/* <GenderChart/>\n            <AgeChart/> */}\n                <Grid.Column width={4}>\n                    {/* <Checkbox toggle label=\"Normalize to population\"></Checkbox> */}\n                    <Grid>\n                        <GridRow centered>\n                            <Grid.Column width={8}>\n                                <Statistic size=\"small\">\n                                    <StatisticValue>\n                                        <StatNumber\n                                            params={{\n                                                usedata: \"detail\",\n                                                total: true\n                                            }}\n                                        />\n                                    </StatisticValue>\n                                    <StatisticLabel>Total cases</StatisticLabel>\n                                </Statistic>\n                            </Grid.Column>\n                            <Grid.Column width={8}>\n                                <Statistic size=\"small\">\n                                    <StatisticValue>\n                                        <StatNumber\n                                            params={{\n                                                usedata: \"detail\",\n                                                total: false,\n                                                date: true\n                                            }}\n                                        />\n                                    </StatisticValue>\n                                    <StatisticLabel>New cases</StatisticLabel>\n                                    <StatisticLabel>\n                                        On{\" \"}\n                                        <LastDateDisplay\n                                            params={{ usedata: \"detail\" }}\n                                        />\n                                    </StatisticLabel>\n                                </Statistic>\n                            </Grid.Column>\n                        </GridRow>\n\n                        <Grid.Column width={16}>\n                            <Segment>\n                                <ProvinceChart params={{ usedata: \"detail\" }} />\n                            </Segment>\n                        </Grid.Column>\n                    </Grid>\n                    {/* </Grid> */}\n                </Grid.Column>\n                <Grid.Column width={6}>\n                    <Tab\n                        menu={{ secondary: true, pointing: true }}\n                        panes={panes_cumulative}\n                        renderActiveOnly={false}\n                    />\n                </Grid.Column>\n                <Grid.Column width={6}>\n                    <Tab\n                        menu={{ secondary: true, pointing: true }}\n                        panes={panes_daily}\n                        renderActiveOnly={false}\n                    />\n                    {/* <DailyTimeChart params={{usedata:'detail'}}/> */}\n                </Grid.Column>\n            </Grid.Row>\n            <Grid.Row columns={2}>\n                <Grid.Column>{/* <OriginChart/> */}</Grid.Column>\n            </Grid.Row>\n        </Grid>\n    );\n    const panes_cumulative_d = [\n        {\n            menuItem: \"Stacked\",\n            pane: (\n                <Tab.Pane attached=\"top\" key={11}>\n                    <TimeChart params={{ stacked: true, usedata: \"deaths\" }} />\n                </Tab.Pane>\n            )\n        },\n        {\n            menuItem: \"Total\",\n            pane: (\n                <Tab.Pane attached=\"top\" key={12}>\n                    <TimeChart params={{ stacked: false, usedata: \"deaths\" }} />\n                </Tab.Pane>\n            )\n        }\n    ];\n    const panes_daily_d = [\n        {\n            menuItem: \"Stacked\",\n            pane: (\n                <Tab.Pane attached=\"top\" key={13}>\n                    <DailyTimeChart\n                        params={{ stacked: true, usedata: \"deaths\" }}\n                    />\n                </Tab.Pane>\n            )\n        },\n        {\n            menuItem: \"Total\",\n            pane: (\n                <Tab.Pane attached=\"top\" key={14}>\n                    <DailyTimeChart\n                        params={{ stacked: false, usedata: \"deaths\" }}\n                    />\n                </Tab.Pane>\n            )\n        }\n    ];\n    const deaths = (\n        <Grid>\n            <Grid.Row columns={16}>\n                {/* <GenderChart/>\n            <AgeChart/> */}\n                <Grid.Column width={4}>\n                    <Grid>\n                        <GridRow centered>\n                            <Grid.Column width={8}>\n                                <Statistic size=\"small\">\n                                    <StatisticValue>\n                                        <StatNumber\n                                            params={{\n                                                usedata: \"deaths\",\n                                                total: true\n                                            }}\n                                        />\n                                    </StatisticValue>\n                                    <StatisticLabel>\n                                        Total deaths\n                                    </StatisticLabel>\n                                </Statistic>\n                            </Grid.Column>\n                            <Grid.Column width={8}>\n                                <Statistic size=\"small\">\n                                    <StatisticValue>\n                                        <StatNumber\n                                            params={{\n                                                usedata: \"deaths\",\n                                                total: false,\n                                                date: true\n                                            }}\n                                        />\n                                    </StatisticValue>\n                                    <StatisticLabel>New deaths</StatisticLabel>\n                                    <StatisticLabel>\n                                        On{\" \"}\n                                        <LastDateDisplay\n                                            params={{ usedata: \"deaths\" }}\n                                        />\n                                    </StatisticLabel>\n                                </Statistic>\n                            </Grid.Column>\n                        </GridRow>\n                        <Grid.Column width={16}>\n                            <Segment>\n                                <ProvinceChart params={{ usedata: \"deaths\" }} />\n                            </Segment>\n                        </Grid.Column>\n                    </Grid>\n                </Grid.Column>\n                <Grid.Column width={6}>\n                    <Tab\n                        menu={{ secondary: true, pointing: true }}\n                        panes={panes_cumulative_d}\n                        renderActiveOnly={false}\n                    />\n                </Grid.Column>\n                <Grid.Column width={6}>\n                    <Tab\n                        menu={{ secondary: true, pointing: true }}\n                        panes={panes_daily_d}\n                        renderActiveOnly={false}\n                    />\n                    {/* <DailyTimeChart params={{usedata:'detail'}}/> */}\n                </Grid.Column>\n            </Grid.Row>\n            <Grid.Row columns={2}>\n                <Grid.Column>{/* <OriginChart/> */}</Grid.Column>\n            </Grid.Row>\n        </Grid>\n    );\n\n    const normalized = (\n        <Grid>\n            <GridRow centered>\n                {/* <Grid.Column width={10}> */}\n                <Header as=\"h2\">CASES PER 1M</Header>\n                {/* </Grid.Column> */}\n            </GridRow>\n            <Grid.Row centered columns={5}>\n                <Grid.Column width={4}>\n                    <Segment>\n                        <ProvinceChart\n                            params={{ usedata: \"detail\", normalize: true }}\n                        />\n                    </Segment>\n                </Grid.Column>\n                <Grid.Column width={6}>\n                    <Segment>\n                        <NormalizedChart\n                            params={{ usedata: \"detail\", normalize: true }}\n                        />\n                    </Segment>\n                </Grid.Column>\n            </Grid.Row>\n        </Grid>\n    );\n    const normalizedd = (\n        <Grid>\n            <GridRow centered>\n                {/* <Grid.Column width={10}> */}\n                <Header as=\"h2\">DEATHS PER 1M</Header>\n                {/* </Grid.Column> */}\n            </GridRow>\n            <Grid.Row centered columns={5}>\n                <Grid.Column width={4}>\n                    <Segment>\n                        <ProvinceChart\n                            params={{ usedata: \"deaths\", normalize: true }}\n                        />\n                    </Segment>\n                </Grid.Column>\n                <Grid.Column width={6}>\n                    <Segment>\n                        <NormalizedChart\n                            params={{ usedata: \"deaths\", normalize: true }}\n                        />\n                    </Segment>\n                </Grid.Column>\n            </Grid.Row>\n        </Grid>\n    );\n    const panes = [\n        {\n            menuItem: \"Positive cases\",\n            pane: (\n                <Tab.Pane attached=\"top\" key={1}>\n                    {cases}\n                </Tab.Pane>\n            )\n        },\n        {\n            menuItem: \"Deaths\",\n            pane: (\n                <Tab.Pane attached=\"top\" key={2}>\n                    {deaths}\n                </Tab.Pane>\n            )\n        },\n        {\n            menuItem: \"Normalized - cases\",\n            pane: (\n                <Tab.Pane attached=\"top\" key={3}>\n                    {normalized}\n                </Tab.Pane>\n            )\n        },\n        {\n            menuItem: \"Normalized - deaths\",\n            pane: (\n                <Tab.Pane attached=\"top\" key={3}>\n                    {normalizedd}\n                </Tab.Pane>\n            )\n        }\n    ];\n    return (\n        <div>\n            <DataContext>\n                <Segment color=\"black\" inverted>\n                    <Header color=\"yellow\" id=\"title\" textAlign=\"center\">\n                        <Icon name=\"heartbeat\" />\n                        Canada Covid-19 data visualization\n                    </Header>\n                </Segment>\n                <Segment>\n                    <Tab\n                        menu={{ secondary: true, pointing: true }}\n                        panes={panes}\n                        renderActiveOnly={false}\n                    />\n                </Segment>\n                <Segment color=\"orange\">\n                    Data source:{\" \"}\n                    <a href=\"https://virihealth.com/\">ViriHealth</a>\n                </Segment>\n            </DataContext>\n        </div>\n    );\n};\n","import React from 'react';\nimport './App.css';\n// import Plot from \"./components/plot\"\nimport { Dashboard } from \"./components/dashboard\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Dashboard/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}